{
  "address": "0xE762d0F235DeB2d83d2F10A9c03B5FB1fbC2fc03",
  "abi": [
    {
      "inputs": [],
      "name": "MathLibraryDefibets__WrongParameter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BILLION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Z_TABLE_MAX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lowerPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "upperPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "impliedVolatility",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "impliedVolatilityTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timeUntilEpxiry",
          "type": "uint256"
        }
      ],
      "name": "calculateProbabilityRange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xf81268ab40bf72585e0b03fc19b6bf59f79c7851833ea6627a76f3babcbdff59",
  "receipt": {
    "to": null,
    "from": "0x36375828fd821935cFf3E8AB6322cAb54BBfaDeC",
    "contractAddress": "0xE762d0F235DeB2d83d2F10A9c03B5FB1fbC2fc03",
    "transactionIndex": 0,
    "gasUsed": "398768",
    "logsBloom": "0x
    "blockHash": "0x22b8a1f0e9b65ee4f447f8c8fc668c22dabd0dce71b4b6e8295c05ff74713689",
    "transactionHash": "0xf81268ab40bf72585e0b03fc19b6bf59f79c7851833ea6627a76f3babcbdff59",
    "logs": [],
    "blockNumber": 1898,
    "cumulativeGasUsed": "398768",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "555ec5b9f83ecbd430c738d2e15868b1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MathLibraryDefibets__WrongParameter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BILLION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Z_TABLE_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lowerPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"impliedVolatility\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"impliedVolatilityTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeUntilEpxiry\",\"type\":\"uint256\"}],\"name\":\"calculateProbabilityRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"calculateProbabilityRange(uint256,uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"currPrice\":\"- the current price of the underlying with decimals\",\"impliedVolatility\":\"- the implied volatility for x days in promille => 30% = 3000\",\"impliedVolatilityTime\":\"- the time of the volatility in seconds\",\"lowerPrice\":\"- lower price of the price range with decimals\",\"timeUntilEpxiry\":\"- the remaining time until expiration in seconds\",\"upperPrice\":\"- upper price of the price range with decimals\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/lib/MathLibraryDefiBets.sol\":\"MathLibraryDefibets\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363934353937373430323937\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"src/lib/MathLibraryDefiBets.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n// Useful for debugging. Remove when deploying to a live network.\\n\\nerror MathLibraryDefibets__WrongParameter();\\nerror MathLibraryDefibets__StdDeviationOutOfBounds();\\n\\nlibrary MathLibraryDefibets {\\n    using SafeMath for uint256;\\n\\n    // positive Z-Table probability values from standard deviation 0 to 3. Needed to get probability from standard deviation.\\n    bytes constant z_table_positive =\\n        hex\\\"144F151615DC16A11763182318E0199A1A501B031BB01C591CFE1D9C1E361EC91F571FDF206120DD215321C3222D229122F02348239B23E82431247424B224EC25212552257F25A925CE25F12610262C2646265D26722685269626A526B226BE26C926D226DA26E126E826ED26F226F626FA26FD27002703\\\";\\n\\n    // negative Z-Table probability values from standard deviation -3 to -0.05. Needed to get probability from standard deviation.\\n    bytes constant z_table_negative =\\n        hex\\\"000D001000130016001A001E00230028002F0036003E00470052005E006B007A008B009E00B300CA00E40100011F01420167019101BE01EF0224025E029C02DF0328037503C80420047F04E3054D05BD063306AF073107B9084708DA09740A120AB70B600C0D0CC00E300EED0FAD106F113411FA12C11388\\\";\\n\\n    uint256 public constant BILLION = 1000000000;\\n    uint256 public constant Z_TABLE_MAX = 59; // 60 values per table with each value 2 byte length\\n\\n    function abs(int256 x) private pure returns (int256) {\\n        return x >= 0 ? x : -x;\\n    }\\n\\n    function calculateStandardDeviation(\\n        uint256 currPrice,\\n        uint256 impliedVolatility30,\\n        uint256 timeUntilEpxiry,\\n        uint256 impliedVolatitityTime\\n    ) internal pure returns (uint256) {\\n        uint256 adjImpliedVol =\\n            (impliedVolatility30.mul(Math.sqrt(timeUntilEpxiry.mul(10 ** 8).div(impliedVolatitityTime)))).div(10000);\\n\\n        return (currPrice.mul(adjImpliedVol)).div(10000);\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), mul(_start, 2)))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    /**\\n     *\\n     * @dev - return the zScore with 4 decimals\\n     */\\n    function calculateZScore(uint256 _delta, uint256 _stdDeviation) internal pure returns (uint256) {\\n        return _delta.mul(10 ** 4).div(_stdDeviation);\\n    }\\n\\n    function lookupZtableFromStdDeviation(uint256 zScore, bool useNegativeZTable) private pure returns (uint16) {\\n        uint256 index = zScore.div(500);\\n\\n        if (Z_TABLE_MAX < index) {\\n            index = Z_TABLE_MAX;\\n        }\\n\\n        if (useNegativeZTable) {\\n            // use negative Z-Table\\n            index = Z_TABLE_MAX - index; /* Invert for negative Z-Table values */\\n            return toUint16(z_table_negative, index);\\n        } else {\\n            // use positive Z-Table\\n            return toUint16(z_table_positive, index);\\n        }\\n    }\\n\\n    function calculateProbabilityForBetPrice(uint256 betPrice, uint256 currPrice, uint256 stdDeviation)\\n        internal\\n        pure\\n        returns (uint16)\\n    {\\n        uint256 delta = 0;\\n        bool isNegative = false;\\n\\n        if (currPrice > betPrice) {\\n            isNegative = true;\\n            delta = currPrice.sub(betPrice);\\n        } else {\\n            delta = betPrice.sub(currPrice);\\n        }\\n\\n        uint256 zScore = calculateZScore(delta, stdDeviation);\\n\\n        return lookupZtableFromStdDeviation(zScore, isNegative);\\n    }\\n\\n    /**\\n     *\\n     * @param lowerPrice - lower price of the price range with decimals\\n     * @param upperPrice - upper price of the price range with decimals\\n     * @param currPrice  - the current price of the underlying with decimals\\n     * @param impliedVolatility - the implied volatility for x days in promille => 30% = 3000\\n     * @param impliedVolatilityTime - the time of the volatility in seconds\\n     * @param timeUntilEpxiry - the remaining time until expiration in seconds\\n     */\\n    function calculateProbabilityRange(\\n        uint256 lowerPrice,\\n        uint256 upperPrice,\\n        uint256 currPrice,\\n        uint256 impliedVolatility,\\n        uint256 impliedVolatilityTime,\\n        uint256 timeUntilEpxiry\\n    ) public pure returns (uint256) {\\n        // Sanity checks\\n        if ((lowerPrice < 0) || (upperPrice < 0) || (currPrice < 0)) {\\n            revert MathLibraryDefibets__WrongParameter();\\n        }\\n\\n        uint256 stdDeviation =\\n            calculateStandardDeviation(currPrice, impliedVolatility, timeUntilEpxiry, impliedVolatilityTime);\\n\\n        //-----------------------------------------------------\\n        // 1. calculate probability for lower range boundary\\n        //-----------------------------------------------------\\n\\n        uint16 propability_lower_10000 = calculateProbabilityForBetPrice(lowerPrice, currPrice, stdDeviation);\\n\\n        //-----------------------------------------------------\\n        // 2. calculate probability for higher range boundary\\n        //-----------------------------------------------------\\n\\n        uint16 propability_higher_10000 = calculateProbabilityForBetPrice(upperPrice, currPrice, stdDeviation);\\n\\n        //---------------------------------------------------------------\\n        // 3. calculate end probability for the range. (higher - lower)\\n        //---------------------------------------------------------------\\n        uint256 probability = propability_higher_10000 - propability_lower_10000;\\n\\n        return (probability);\\n    }\\n}\\n\",\"keccak256\":\"0xb9c52b169eb04dfa7984a9abd20944b7e0ec1e236a36c7a3f9ffb48f7b69ea74\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61064061003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c80634beda18b1461005057806399aaa6dc1461006d578063ea75fe3b14610075575b600080fd5b61005b633b9aca0081565b60405190815260200160405180910390f35b61005b603b81565b61005b610083366004610431565b600080610092868685876100d1565b905060006100a189888461011e565b905060006100b089898561011e565b905060006100be838361048a565b61ffff169b9a5050505050505050505050565b6000806101026127106100f06100fb6100f687838a6305f5e10061016e565b90610183565b61018f565b889061016e565b90506101146127106100f0888461016e565b9695505050505050565b600080808585111561013e57506001610137858761027e565b915061014b565b610148868661027e565b91505b6000610157838661028a565b9050610163818361029c565b979650505050505050565b600061017a82846104a5565b90505b92915050565b600061017a82846104d2565b6000816000036101a157506000919050565b600060016101ae84610320565b901c6001901b905060018184816101c7576101c76104bc565b048201901c905060018184816101df576101df6104bc565b048201901c905060018184816101f7576101f76104bc565b048201901c9050600181848161020f5761020f6104bc565b048201901c90506001818481610227576102276104bc565b048201901c9050600181848161023f5761023f6104bc565b048201901c90506001818481610257576102576104bc565b048201901c905061027781828581610271576102716104bc565b046103b4565b9392505050565b600061017a82846104f4565b600061017a826100f08561271061016e565b6000806102ab846101f4610183565b905080603b10156102ba5750603b5b82156102f7576102cb81603b6104f4565b90506102ef6040518060a001604052806078815260200161059360789139826103ca565b91505061017d565b6102ef6040518060a001604052806078815260200161051b60789139826103ca565b5092915050565b600080608083901c1561033557608092831c92015b604083901c1561034757604092831c92015b602083901c1561035957602092831c92015b601083901c1561036b57601092831c92015b600883901c1561037d57600892831c92015b600483901c1561038f57600492831c92015b600283901c156103a157600292831c92015b600183901c1561017d5760010192915050565b60008183106103c3578161017a565b5090919050565b60006103d7826002610507565b835110156104225760405162461bcd60e51b8152602060048201526014602482015273746f55696e7431365f6f75744f66426f756e647360601b604482015260640160405180910390fd5b50600290810291909101015190565b60008060008060008060c0878903121561044a57600080fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b634e487b7160e01b600052601160045260246000fd5b61ffff82811682821603908082111561031957610319610474565b808202811582820484141761017d5761017d610474565b634e487b7160e01b600052601260045260246000fd5b6000826104ef57634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561017d5761017d610474565b8082018082111561017d5761017d61047456fe144f151615dc16a11763182318e0199a1a501b031bb01c591cfe1d9c1e361ec91f571fdf206120dd215321c3222d229122f02348239b23e82431247424b224ec25212552257f25a925ce25f12610262c2646265d26722685269626a526b226be26c926d226da26e126e826ed26f226f626fa26fd27002703000d001000130016001a001e00230028002f0036003e00470052005e006b007a008b009e00b300ca00e40100011f01420167019101be01ef0224025e029c02df0328037503c80420047f04e3054d05bd063306af073107b9084708da09740a120ab70b600c0d0cc00e300eed0fad106f113411fa12c11388a2646970667358221220f7d905cc20248d6b17bf3d62a67295b787f0498d1fa695a16419d64f8b42e88f64736f6c63430008130033",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c80634beda18b1461005057806399aaa6dc1461006d578063ea75fe3b14610075575b600080fd5b61005b633b9aca0081565b60405190815260200160405180910390f35b61005b603b81565b61005b610083366004610431565b600080610092868685876100d1565b905060006100a189888461011e565b905060006100b089898561011e565b905060006100be838361048a565b61ffff169b9a5050505050505050505050565b6000806101026127106100f06100fb6100f687838a6305f5e10061016e565b90610183565b61018f565b889061016e565b90506101146127106100f0888461016e565b9695505050505050565b600080808585111561013e57506001610137858761027e565b915061014b565b610148868661027e565b91505b6000610157838661028a565b9050610163818361029c565b979650505050505050565b600061017a82846104a5565b90505b92915050565b600061017a82846104d2565b6000816000036101a157506000919050565b600060016101ae84610320565b901c6001901b905060018184816101c7576101c76104bc565b048201901c905060018184816101df576101df6104bc565b048201901c905060018184816101f7576101f76104bc565b048201901c9050600181848161020f5761020f6104bc565b048201901c90506001818481610227576102276104bc565b048201901c9050600181848161023f5761023f6104bc565b048201901c90506001818481610257576102576104bc565b048201901c905061027781828581610271576102716104bc565b046103b4565b9392505050565b600061017a82846104f4565b600061017a826100f08561271061016e565b6000806102ab846101f4610183565b905080603b10156102ba5750603b5b82156102f7576102cb81603b6104f4565b90506102ef6040518060a001604052806078815260200161059360789139826103ca565b91505061017d565b6102ef6040518060a001604052806078815260200161051b60789139826103ca565b5092915050565b600080608083901c1561033557608092831c92015b604083901c1561034757604092831c92015b602083901c1561035957602092831c92015b601083901c1561036b57601092831c92015b600883901c1561037d57600892831c92015b600483901c1561038f57600492831c92015b600283901c156103a157600292831c92015b600183901c1561017d5760010192915050565b60008183106103c3578161017a565b5090919050565b60006103d7826002610507565b835110156104225760405162461bcd60e51b8152602060048201526014602482015273746f55696e7431365f6f75744f66426f756e647360601b604482015260640160405180910390fd5b50600290810291909101015190565b60008060008060008060c0878903121561044a57600080fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b634e487b7160e01b600052601160045260246000fd5b61ffff82811682821603908082111561031957610319610474565b808202811582820484141761017d5761017d610474565b634e487b7160e01b600052601260045260246000fd5b6000826104ef57634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561017d5761017d610474565b8082018082111561017d5761017d61047456fe144f151615dc16a11763182318e0199a1a501b031bb01c591cfe1d9c1e361ec91f571fdf206120dd215321c3222d229122f02348239b23e82431247424b224ec25212552257f25a925ce25f12610262c2646265d26722685269626a526b226be26c926d226da26e126e826ed26f226f626fa26fd27002703000d001000130016001a001e00230028002f0036003e00470052005e006b007a008b009e00b300ca00e40100011f01420167019101be01ef0224025e029c02df0328037503c80420047f04e3054d05bd063306af073107b9084708da09740a120ab70b600c0d0cc00e300eed0fad106f113411fa12c11388a2646970667358221220f7d905cc20248d6b17bf3d62a67295b787f0498d1fa695a16419d64f8b42e88f64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "calculateProbabilityRange(uint256,uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "currPrice": "- the current price of the underlying with decimals",
          "impliedVolatility": "- the implied volatility for x days in promille => 30% = 3000",
          "impliedVolatilityTime": "- the time of the volatility in seconds",
          "lowerPrice": "- lower price of the price range with decimals",
          "timeUntilEpxiry": "- the remaining time until expiration in seconds",
          "upperPrice": "- upper price of the price range with decimals"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}