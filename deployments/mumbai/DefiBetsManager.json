{
  "address": "0xBc4aE6aacBA1b080C9B1E89fF4C120E15602bE7a",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DefiBetsManager__ExpTimeNotValid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DefiBetsManager__NoPointTrackerSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DefiBetsManager__NoValidUnderlying",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DefiBetsManager__NotValidRoundId",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feePpm",
          "type": "uint256"
        }
      ],
      "name": "FeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "underlying",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "feed",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        }
      ],
      "name": "IVFeedUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payoutFactor",
          "type": "uint256"
        }
      ],
      "name": "PayoutFactorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "underlying",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "name": "PriceFeedUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "underlying",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "underlyingHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "defiBets",
          "type": "address"
        }
      ],
      "name": "UnderlyingAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_underlying",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_feed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_defiBets",
          "type": "address"
        }
      ],
      "name": "addUnderlyingToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_betSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expTime",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        }
      ],
      "name": "calculateWinning",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        }
      ],
      "name": "claimWinnings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_tokenHash",
          "type": "bytes32"
        }
      ],
      "name": "createNewExpTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "defiBetsContracts",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_expTime",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_underlying",
          "type": "string"
        },
        {
          "internalType": "uint80",
          "name": "_roundId",
          "type": "uint80"
        }
      ],
      "name": "executeExpiration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        }
      ],
      "name": "getCurrPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        }
      ],
      "name": "getImplVol",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_expTime",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "_roundId",
          "type": "uint80"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_token",
          "type": "string"
        }
      ],
      "name": "getUnderlyingByte",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_startExpTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minBetDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxBetDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_slot",
          "type": "uint256"
        }
      ],
      "name": "initializeBets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pointTracker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expTime",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_underlying",
          "type": "string"
        }
      ],
      "name": "setBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minBetDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxBetDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_slot",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timeDelta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_dependentTimeStamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        }
      ],
      "name": "setDefiBetsParameter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pointTracker",
          "type": "address"
        }
      ],
      "name": "setPointTracker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "underlyingIVFeeds",
      "outputs": [
        {
          "internalType": "address",
          "name": "feedAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "underlyingPriceFeeds",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_feed",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        }
      ],
      "name": "updateIVFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_feed",
          "type": "address"
        }
      ],
      "name": "updatePriceFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "validUnderlying",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x30ef3a6c5896e13940b42f1770ee24114da92edbe5438abc76fb3404ffa24632",
  "receipt": {
    "to": null,
    "from": "0x36375828fd821935cFf3E8AB6322cAb54BBfaDeC",
    "contractAddress": "0xBc4aE6aacBA1b080C9B1E89fF4C120E15602bE7a",
    "transactionIndex": 4,
    "gasUsed": "1346918",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000020000000400000002000000000000000000000000008000000000000000000000000000000000000000000000000000000000800001000000000001000100000000000000000000020000000000000000000a00000000000000000480000000000000400000000000400000000000000000000000000002000000000000000000000000200000000000000000000000000000000000000000000000000000000000004000000000000000000001000000000000000000000000000000100000000020000000000000000080000000000000000000000000000000000000000000100000",
    "blockHash": "0x86399ef8f08d3f84b409f611c3114d604b83f56c1a309bd099664f9399ba5ae8",
    "transactionHash": "0x30ef3a6c5896e13940b42f1770ee24114da92edbe5438abc76fb3404ffa24632",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 40271308,
        "transactionHash": "0x30ef3a6c5896e13940b42f1770ee24114da92edbe5438abc76fb3404ffa24632",
        "address": "0xBc4aE6aacBA1b080C9B1E89fF4C120E15602bE7a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000036375828fd821935cff3e8ab6322cab54bbfadec"
        ],
        "data": "0x",
        "logIndex": 13,
        "blockHash": "0x86399ef8f08d3f84b409f611c3114d604b83f56c1a309bd099664f9399ba5ae8"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 40271308,
        "transactionHash": "0x30ef3a6c5896e13940b42f1770ee24114da92edbe5438abc76fb3404ffa24632",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000036375828fd821935cff3e8ab6322cab54bbfadec",
          "0x0000000000000000000000005082f249cdb2f2c1ee035e4f423c46ea2dab3ab1"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000bf68976543600000000000000000000000000000000000000000000000000017c20330c4c287e0000000000000000000000000000000000000000000001e0e2a3422ea27d9073000000000000000000000000000000000000000000000000017029a995f7f27e0000000000000000000000000000000000000000000001e0e2af38b818d1c673",
        "logIndex": 14,
        "blockHash": "0x86399ef8f08d3f84b409f611c3114d604b83f56c1a309bd099664f9399ba5ae8"
      }
    ],
    "blockNumber": 40271308,
    "cumulativeGasUsed": "2932193",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "1d4d1ef8a595830571c07896a60dd283",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DefiBetsManager__ExpTimeNotValid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DefiBetsManager__NoPointTrackerSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DefiBetsManager__NoValidUnderlying\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DefiBetsManager__NotValidRoundId\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePpm\",\"type\":\"uint256\"}],\"name\":\"FeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"underlying\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feed\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"IVFeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payoutFactor\",\"type\":\"uint256\"}],\"name\":\"PayoutFactorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"underlying\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"name\":\"PriceFeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"underlying\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"underlyingHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"defiBets\",\"type\":\"address\"}],\"name\":\"UnderlyingAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_underlying\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_feed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_defiBets\",\"type\":\"address\"}],\"name\":\"addUnderlyingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_betSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"calculateWinning\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"claimWinnings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_tokenHash\",\"type\":\"bytes32\"}],\"name\":\"createNewExpTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"defiBetsContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_expTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_underlying\",\"type\":\"string\"},{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"executeExpiration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"getCurrPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"getImplVol\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_expTime\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_token\",\"type\":\"string\"}],\"name\":\"getUnderlyingByte\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_startExpTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBetDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBetDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slot\",\"type\":\"uint256\"}],\"name\":\"initializeBets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pointTracker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_underlying\",\"type\":\"string\"}],\"name\":\"setBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBetDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBetDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dependentTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"setDefiBetsParameter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pointTracker\",\"type\":\"address\"}],\"name\":\"setPointTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"underlyingIVFeeds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"feedAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"underlyingPriceFeeds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_feed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"updateIVFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_feed\",\"type\":\"address\"}],\"name\":\"updatePriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"validUnderlying\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"claimWinnings(uint256,bytes32)\":{\"details\":\"Claims the winnings for a user based on a specified token ID and underlying asset hash.\",\"params\":{\"_hash\":\"The hash of the underlying asset for the bet.\",\"_tokenId\":\"The token ID representing the bet.\"}},\"executeExpiration(uint256,string,uint80)\":{\"details\":\"Executes the expiration of a bet based on the specified expiration time and underlying asset.\",\"params\":{\"_expTime\":\"The expiration time of the bet.\",\"_roundId\":\"The round id for a valid price of the underlying\",\"_underlying\":\"The underlying asset for the bet.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setBet(uint256,uint256,uint256,uint256,string)\":{\"details\":\"Sets a bet for a user in the decentralized betting platform.\",\"params\":{\"_betSize\":\"The size of the bet.\",\"_expTime\":\"The expiration time for the bet.\",\"_maxPrice\":\"The maximum price for the bet.\",\"_minPrice\":\"The minimum price for the bet.\",\"_underlying\":\"The underlying asset for the bet.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"DefiBets Manager Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract controls the main functions of the protocol, allowing users to interact with the decentralized betting platform. It manages liquidity, bets, winnings, and expiration of bets.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/core/DefiBetsManager.sol\":\"DefiBetsManager\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363935313038303230383631\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"src/core/DefiBetsManager.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"../interface/core/IDefiBets.sol\\\";\\nimport \\\"../interface/core/IPointTracker.sol\\\";\\n\\n// Library import\\nimport \\\"../lib/MathLibraryDefiBets.sol\\\";\\n\\nerror DefiBetsManager__NoValidUnderlying();\\nerror DefiBetsManager__NoLiquidity();\\nerror DefiBetsManager__FeeNotAllowed();\\nerror DefiBetsManager__FeeWouldBeTooSmall();\\nerror DefiBetsManager__ParamNull();\\nerror DefiBetsManager__NotValidRoundId();\\nerror DefiBetsManager__AccessForbidden();\\nerror DefiBetsManager__ExpTimeNotValid();\\nerror DefiBetsManager__NoPointTrackerSet();\\n\\n/**\\n * @title DefiBets Manager Contract\\n * @notice This contract controls the main functions of the protocol, allowing users to interact with the decentralized betting platform. It manages liquidity, bets, winnings, and expiration of bets.\\n */\\ncontract DefiBetsManager is Pausable, Ownable {\\n    using SafeMath for uint256;\\n\\n    struct IVFeed {\\n        address feedAddress;\\n        uint256 period;\\n    }\\n\\n    uint256 public constant MULTIPLIER = 10000;\\n\\n    /* ====== State Variables ====== */\\n\\n    address public pointTracker;\\n\\n    mapping(bytes32 => IVFeed) public underlyingIVFeeds;\\n    mapping(bytes32 => address) public underlyingPriceFeeds;\\n    mapping(bytes32 => bool) public validUnderlying;\\n    mapping(bytes32 => address) public defiBetsContracts;\\n\\n    /* ====== Events ====== */\\n    event UnderlyingAdded(string underlying, bytes32 underlyingHash, address defiBets);\\n    event PriceFeedUpdated(bytes32 underlying, address priceFeed);\\n    event FeeUpdated(uint256 feePpm);\\n    event IVFeedUpdated(bytes32 underlying, address feed, uint256 period);\\n    event PayoutFactorUpdated(uint256 payoutFactor);\\n\\n    /* ====== Modifier ====== */\\n\\n    constructor() {}\\n\\n    /* ======= Mutation Functions ====== */\\n\\n    /**\\n     *\\n     * @dev Sets a bet for a user in the decentralized betting platform.\\n     * @param _betSize The size of the bet.\\n     * @param _minPrice The minimum price for the bet.\\n     * @param _maxPrice The maximum price for the bet.\\n     * @param _expTime The expiration time for the bet.\\n     * @param _underlying The underlying asset for the bet.\\n     */\\n    function setBet(uint256 _betSize, uint256 _minPrice, uint256 _maxPrice, uint256 _expTime, string memory _underlying)\\n        external\\n        whenNotPaused\\n    {\\n        bytes32 _hash = getUnderlyingByte(_underlying);\\n        _isValidUnderlying(_hash);\\n        _isPointTrackerSet();\\n\\n        if (_expTime > IPointTracker(pointTracker).getSeasonEndDate()) {\\n            revert DefiBetsManager__ExpTimeNotValid();\\n        }\\n\\n        //TODO: Check if the account has enough points\\n\\n        uint256 _price = getCurrPrice(_hash);\\n\\n        uint256 _winning = calculateWinning(_price, _betSize, _minPrice, _maxPrice, _expTime, _hash);\\n\\n        address _defiBets = defiBetsContracts[_hash];\\n\\n        _executeBetForAccount(_defiBets, _betSize, _minPrice, _maxPrice, _expTime, _winning);\\n\\n        IPointTracker(pointTracker).reducePointsForPlayer(msg.sender, _betSize);\\n    }\\n\\n    /**\\n     * @dev Claims the winnings for a user based on a specified token ID and underlying asset hash.\\n     * @param _tokenId The token ID representing the bet.\\n     * @param _hash The hash of the underlying asset for the bet.\\n     */\\n    function claimWinnings(uint256 _tokenId, bytes32 _hash) external whenNotPaused {\\n        _isPointTrackerSet();\\n        address _defiBets = defiBetsContracts[_hash];\\n\\n        (uint256 _tokenAmount, bool _profit) = IDefiBets(_defiBets).claimForAccount(msg.sender, _tokenId);\\n\\n        //Update the points of the user\\n        if (_profit) {\\n            IPointTracker(pointTracker).addPointsForPlayer(msg.sender, _tokenAmount);\\n        }\\n    }\\n\\n    /**\\n     * @dev Executes the expiration of a bet based on the specified expiration time and underlying asset.\\n     * @param _expTime The expiration time of the bet.\\n     * @param _underlying The underlying asset for the bet.\\n     * @param _roundId The round id for a valid price of the underlying\\n     */\\n    function executeExpiration(uint256 _expTime, string memory _underlying, uint80 _roundId) external whenNotPaused {\\n        bytes32 _hash = getUnderlyingByte(_underlying);\\n        _isValidUnderlying(_hash);\\n\\n        uint256 _price = getPrice(_hash, _expTime, _roundId);\\n\\n        address _defiBets = defiBetsContracts[_hash];\\n\\n        IDefiBets(_defiBets).performExpiration(_expTime, _price);\\n    }\\n\\n    function createNewExpTime(bytes32 _tokenHash) external whenNotPaused {\\n        _isValidUnderlying(_tokenHash);\\n\\n        address _defiBets = defiBetsContracts[_tokenHash];\\n\\n        IDefiBets(_defiBets).initializeNewExpTime();\\n    }\\n\\n    /* ====== Setup Functions ====== */\\n\\n    function setPointTracker(address _pointTracker) external onlyOwner {\\n        pointTracker = _pointTracker;\\n    }\\n\\n    function addUnderlyingToken(string memory _underlying, address _feed, address _defiBets) external onlyOwner {\\n        bytes32 _hash = getUnderlyingByte(_underlying);\\n\\n        validUnderlying[_hash] = true;\\n\\n        updatePriceFeed(_hash, _feed);\\n\\n        defiBetsContracts[_hash] = _defiBets;\\n\\n        emit UnderlyingAdded(_underlying, _hash, _defiBets);\\n    }\\n\\n    function updatePriceFeed(bytes32 _hash, address _feed) public onlyOwner {\\n        _isValidUnderlying(_hash);\\n\\n        underlyingPriceFeeds[_hash] = _feed;\\n\\n        emit PriceFeedUpdated(_hash, _feed);\\n    }\\n\\n    function updateIVFeed(bytes32 _hash, address _feed, uint256 _period) public onlyOwner {\\n        _isValidUnderlying(_hash);\\n\\n        underlyingIVFeeds[_hash] = IVFeed(_feed, _period);\\n\\n        emit IVFeedUpdated(_hash, _feed, _period);\\n    }\\n\\n    function initializeBets(\\n        bytes32 _hash,\\n        uint256 _startExpTime,\\n        uint256 _minBetDuration,\\n        uint256 _maxBetDuration,\\n        uint256 _slot\\n    ) external onlyOwner {\\n        address _defiBets = defiBetsContracts[_hash];\\n\\n        IDefiBets(_defiBets).initializeData(_startExpTime, _minBetDuration, _maxBetDuration, _slot);\\n    }\\n\\n    function setDefiBetsParameter(\\n        uint256 _minBetDuration,\\n        uint256 _maxBetDuration,\\n        uint256 _slot,\\n        uint256 _timeDelta,\\n        uint256 _dependentTimeStamp,\\n        bytes32 _hash\\n    ) external onlyOwner {\\n        _isValidUnderlying(_hash);\\n\\n        address _defiBetsAddress = defiBetsContracts[_hash];\\n\\n        IDefiBets(_defiBetsAddress).setBetParamater(\\n            _maxBetDuration, _minBetDuration, _slot, _timeDelta, _dependentTimeStamp\\n        );\\n    }\\n\\n    /* ====== Internal Functions ====== */\\n\\n    function _isValidUnderlying(bytes32 _hash) internal view {\\n        if (validUnderlying[_hash] == false) {\\n            revert DefiBetsManager__NoValidUnderlying();\\n        }\\n    }\\n\\n    function _executeBetForAccount(\\n        address _defiBets,\\n        uint256 _betSize,\\n        uint256 _minPrice,\\n        uint256 _maxPrice,\\n        uint256 _expTime,\\n        uint256 _winning\\n    ) internal {\\n        IDefiBets(_defiBets).setBetForAccount(msg.sender, _betSize, _minPrice, _maxPrice, _expTime, _winning);\\n    }\\n\\n    function _isRoundIdValid(\\n        uint256 _expTime,\\n        uint80 _roundId,\\n        uint80 _latestRoundId,\\n        uint256 _latestRoundIdTimestamp,\\n        address _priceFeed\\n    ) internal view {\\n        bool _valid = true;\\n\\n        if (_roundId > _latestRoundId) {\\n            _valid = false;\\n        }\\n\\n        if (_roundId < _latestRoundId) {\\n            (,,, uint256 _timestamp,) = AggregatorV3Interface(_priceFeed).getRoundData(_roundId + 1);\\n            _valid = _timestamp >= _expTime;\\n        }\\n\\n        if (_roundId == _latestRoundId) {\\n            _valid = _latestRoundIdTimestamp <= _expTime;\\n        }\\n\\n        if (_valid == false) {\\n            revert DefiBetsManager__NotValidRoundId();\\n        }\\n    }\\n\\n    function _calculateWinnings(uint256 _value, uint256 _probability) internal pure returns (uint256) {\\n        return (_value).mul(MULTIPLIER).div(_probability);\\n    }\\n\\n    function _isPointTrackerSet() internal view {\\n        if (pointTracker == address(0)) {\\n            revert DefiBetsManager__NoPointTrackerSet();\\n        }\\n    }\\n\\n    /* ====== Pure/View Functions ====== */\\n\\n    function getCurrPrice(bytes32 _hash) public view returns (uint256) {\\n        uint256 price;\\n\\n        address _priceFeed = underlyingPriceFeeds[_hash];\\n        if(_priceFeed == address(0)){\\n            return 0;\\n        }\\n\\n        (, int256 answer,,,) = AggregatorV3Interface(_priceFeed).latestRoundData();\\n\\n        price = uint256(answer);\\n\\n        return price;\\n    }\\n\\n    function getPrice(bytes32 _hash, uint256 _expTime, uint80 _roundId) public view returns (uint256) {\\n        uint256 price;\\n\\n        if (underlyingPriceFeeds[_hash] != address(0) && block.timestamp >= _expTime) {\\n            address _priceFeed = underlyingPriceFeeds[_hash];\\n\\n            (uint80 _latestRoundId, int256 _latestAnswer,, uint256 _latestTimestamp,) =\\n                AggregatorV3Interface(_priceFeed).latestRoundData();\\n\\n            _isRoundIdValid(_expTime, _roundId, _latestRoundId, _latestTimestamp, _priceFeed);\\n\\n            if (_latestRoundId == _roundId) {\\n                price = uint256(_latestAnswer);\\n            } else {\\n                (, int256 _answer,,,) = AggregatorV3Interface(_priceFeed).getRoundData(_roundId);\\n                price = uint256(_answer);\\n            }\\n        }\\n\\n        return price;\\n    }\\n\\n    function getUnderlyingByte(string memory _token) public pure returns (bytes32) {\\n        return keccak256(bytes(_token));\\n    }\\n\\n    function calculateWinning(\\n        uint256 _price,\\n        uint256 _betSize,\\n        uint256 _minPrice,\\n        uint256 _maxPrice,\\n        uint256 _expTime,\\n        bytes32 _hash\\n    ) public view returns (uint256) {\\n        uint256 vola = getImplVol(_hash);\\n        if (vola == 0) {\\n            return 0;\\n        }\\n\\n        //Probabiliy per 10000\\n        uint256 probability = MathLibraryDefibets.calculateProbabilityRange(\\n            _minPrice,\\n            _maxPrice,\\n            _price, /* current price BTC */\\n            vola,\\n            underlyingIVFeeds[_hash].period,\\n            (_expTime.sub(block.timestamp))\\n        ); /* days untill expiry * 10000 */\\n\\n        return _calculateWinnings(_betSize, probability);\\n    }\\n\\n    function _isNotNull(uint256 param) internal pure {\\n        if (0 == param) {\\n            revert DefiBetsManager__ParamNull();\\n        }\\n    }\\n\\n    function getImplVol(bytes32 _hash) public view returns (uint256) {\\n        address volaFeed = underlyingIVFeeds[_hash].feedAddress;\\n        if (volaFeed == address(0)) {\\n            return 0;\\n        }\\n\\n        (, int256 answer,,,) = AggregatorV3Interface(underlyingIVFeeds[_hash].feedAddress).latestRoundData();\\n\\n        return uint256(answer);\\n    }\\n}\\n\",\"keccak256\":\"0x2fbc439438e584a3125404f4a7a68bfdee52b3a32bbb27ea6d21d83c2410c3eb\",\"license\":\"MIT\"},\"src/interface/core/IDefiBets.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IDefiBets {\\n    function setBetForAccount(\\n        address _account,\\n        uint256 _betSize,\\n        uint256 _minPrice,\\n        uint256 _maxPrice,\\n        uint256 _expTime,\\n        uint256 _winning\\n    ) external;\\n\\n    function claimForAccount(address _account, uint256 _betID) external returns (uint256, bool);\\n\\n    function setBetParamater(\\n        uint256 _minBetDuration,\\n        uint256 _maxBetDuration,\\n        uint256 _slot,\\n        uint256 _timeDelta,\\n        uint256 _dependentTimeStamp\\n    ) external;\\n\\n    function performExpiration(uint256 _expTime, uint256 _expPrice) external;\\n\\n    function initializeNewExpTime() external;\\n\\n    function lastActiveExpTime() external returns (uint256);\\n\\n    function initializeData(uint256 _startExpTime, uint256 _minBetDuration, uint256 _maxBetDuration, uint256 _slot)\\n        external;\\n}\\n\",\"keccak256\":\"0x2a4cd783fa0b3debf72c2eec8294aaa64f7f358908b02d12235dca87d9d7f3f1\",\"license\":\"MIT\"},\"src/interface/core/IPointTracker.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IPointTracker {\\n    function reducePointsForPlayer(address _player, uint256 _points) external;\\n\\n    function addPointsForPlayer(address _player, uint256 _points) external;\\n\\n    function getSeasonEndDate() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x52cafe31bec41b1f4aa84dc8e0f423de2e40e987bf5c6178b9e63f46c220f676\",\"license\":\"MIT\"},\"src/lib/MathLibraryDefiBets.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n// Useful for debugging. Remove when deploying to a live network.\\n\\nerror MathLibraryDefibets__WrongParameter();\\nerror MathLibraryDefibets__StdDeviationOutOfBounds();\\n\\nlibrary MathLibraryDefibets {\\n    using SafeMath for uint256;\\n\\n    // positive Z-Table probability values from standard deviation 0 to 3. Needed to get probability from standard deviation.\\n    bytes constant z_table_positive =\\n        hex\\\"144F151615DC16A11763182318E0199A1A501B031BB01C591CFE1D9C1E361EC91F571FDF206120DD215321C3222D229122F02348239B23E82431247424B224EC25212552257F25A925CE25F12610262C2646265D26722685269626A526B226BE26C926D226DA26E126E826ED26F226F626FA26FD27002703\\\";\\n\\n    // negative Z-Table probability values from standard deviation -3 to -0.05. Needed to get probability from standard deviation.\\n    bytes constant z_table_negative =\\n        hex\\\"000D001000130016001A001E00230028002F0036003E00470052005E006B007A008B009E00B300CA00E40100011F01420167019101BE01EF0224025E029C02DF0328037503C80420047F04E3054D05BD063306AF073107B9084708DA09740A120AB70B600C0D0CC00E300EED0FAD106F113411FA12C11388\\\";\\n\\n    uint256 public constant BILLION = 1000000000;\\n    uint256 public constant Z_TABLE_MAX = 59; // 60 values per table with each value 2 byte length\\n\\n    function abs(int256 x) private pure returns (int256) {\\n        return x >= 0 ? x : -x;\\n    }\\n\\n    function calculateStandardDeviation(\\n        uint256 currPrice,\\n        uint256 impliedVolatility30,\\n        uint256 timeUntilEpxiry,\\n        uint256 impliedVolatitityTime\\n    ) internal pure returns (uint256) {\\n        uint256 adjImpliedVol =\\n            (impliedVolatility30.mul(Math.sqrt(timeUntilEpxiry.mul(10 ** 8).div(impliedVolatitityTime)))).div(10000);\\n\\n        return (currPrice.mul(adjImpliedVol)).div(10000);\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), mul(_start, 2)))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    /**\\n     *\\n     * @dev - return the zScore with 4 decimals\\n     */\\n    function calculateZScore(uint256 _delta, uint256 _stdDeviation) internal pure returns (uint256) {\\n        return _delta.mul(10 ** 4).div(_stdDeviation);\\n    }\\n\\n    function lookupZtableFromStdDeviation(uint256 zScore, bool useNegativeZTable) private pure returns (uint16) {\\n        uint256 index = zScore.div(500);\\n\\n        if (Z_TABLE_MAX < index) {\\n            index = Z_TABLE_MAX;\\n        }\\n\\n        if (useNegativeZTable) {\\n            // use negative Z-Table\\n            index = Z_TABLE_MAX - index; /* Invert for negative Z-Table values */\\n            return toUint16(z_table_negative, index);\\n        } else {\\n            // use positive Z-Table\\n            return toUint16(z_table_positive, index);\\n        }\\n    }\\n\\n    function calculateProbabilityForBetPrice(uint256 betPrice, uint256 currPrice, uint256 stdDeviation)\\n        internal\\n        pure\\n        returns (uint16)\\n    {\\n        uint256 delta = 0;\\n        bool isNegative = false;\\n\\n        if (currPrice > betPrice) {\\n            isNegative = true;\\n            delta = currPrice.sub(betPrice);\\n        } else {\\n            delta = betPrice.sub(currPrice);\\n        }\\n\\n        uint256 zScore = calculateZScore(delta, stdDeviation);\\n\\n        return lookupZtableFromStdDeviation(zScore, isNegative);\\n    }\\n\\n    /**\\n     *\\n     * @param lowerPrice - lower price of the price range with decimals\\n     * @param upperPrice - upper price of the price range with decimals\\n     * @param currPrice  - the current price of the underlying with decimals\\n     * @param impliedVolatility - the implied volatility for x days in promille => 30% = 3000\\n     * @param impliedVolatilityTime - the time of the volatility in seconds\\n     * @param timeUntilEpxiry - the remaining time until expiration in seconds\\n     */\\n    function calculateProbabilityRange(\\n        uint256 lowerPrice,\\n        uint256 upperPrice,\\n        uint256 currPrice,\\n        uint256 impliedVolatility,\\n        uint256 impliedVolatilityTime,\\n        uint256 timeUntilEpxiry\\n    ) public pure returns (uint256) {\\n        // Sanity checks\\n        if ((lowerPrice < 0) || (upperPrice < 0) || (currPrice < 0)) {\\n            revert MathLibraryDefibets__WrongParameter();\\n        }\\n\\n        uint256 stdDeviation =\\n            calculateStandardDeviation(currPrice, impliedVolatility, timeUntilEpxiry, impliedVolatilityTime);\\n\\n        //-----------------------------------------------------\\n        // 1. calculate probability for lower range boundary\\n        //-----------------------------------------------------\\n\\n        uint16 propability_lower_10000 = calculateProbabilityForBetPrice(lowerPrice, currPrice, stdDeviation);\\n\\n        //-----------------------------------------------------\\n        // 2. calculate probability for higher range boundary\\n        //-----------------------------------------------------\\n\\n        uint16 propability_higher_10000 = calculateProbabilityForBetPrice(upperPrice, currPrice, stdDeviation);\\n\\n        //---------------------------------------------------------------\\n        // 3. calculate end probability for the range. (higher - lower)\\n        //---------------------------------------------------------------\\n        uint256 probability = propability_higher_10000 - propability_lower_10000;\\n\\n        return (probability);\\n    }\\n}\\n\",\"keccak256\":\"0xb9c52b169eb04dfa7984a9abd20944b7e0ec1e236a36c7a3f9ffb48f7b69ea74\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506000805460ff1916905561002433610029565b610082565b600080546001600160a01b03838116610100818102610100600160a81b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b6116f1806100916000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c80638da5cb5b116100de578063c81b270111610097578063d8c4683211610071578063d8c468321461038b578063e1ec18c5146103b4578063f2fde38b146103c7578063fd9a6035146103da57600080fd5b8063c81b270114610342578063d21c2b5b14610355578063d7861d861461036857600080fd5b80638da5cb5b146102cd5780639536c1b0146102e35780639f91a782146102f6578063b483324e14610309578063b54279b41461031c578063c2b6cc9d1461032f57600080fd5b806341446b0a1161013057806341446b0a1461024c5780634abfa5701461025f5780635c975abb146102725780635e7e499614610289578063715018a61461029c578063781e98ae146102a457600080fd5b8063059f8b16146101785780631e1f5af91461019457806325d19adf146101a95780633476d36f146101bc57806336964579146101cf5780633806887f14610221575b600080fd5b61018161271081565b6040519081526020015b60405180910390f35b6101a76101a236600461119d565b6103f3565b005b6101a76101b7366004611262565b6104fe565b6101816101ca3660046112c6565b61066a565b6102026101dd3660046112c6565b600260205260009081526040902080546001909101546001600160a01b039091169082565b604080516001600160a01b03909316835260208301919091520161018b565b600154610234906001600160a01b031681565b6040516001600160a01b03909116815260200161018b565b6101a761025a3660046112df565b610715565b6101a761026d36600461133e565b6107b8565b60005460ff165b604051901515815260200161018b565b6101a761029736600461136a565b61082f565b6101a76108cf565b6102346102b23660046112c6565b6005602052600090815260409020546001600160a01b031681565b60005461010090046001600160a01b0316610234565b6101a76102f13660046113c8565b6108e3565b6101a7610304366004611403565b610976565b6101816103173660046112c6565b6109a0565b6101a761032a366004611433565b610a3b565b61018161033d3660046112df565b610aa8565b6101a761035036600461148e565b610ba2565b6101816103633660046114c3565b610c43565b6102796103763660046112c6565b60046020526000908152604090205460ff1681565b6102346103993660046112c6565b6003602052600090815260409020546001600160a01b031681565b6101a76103c23660046112c6565b610db0565b6101a76103d5366004611403565b610e2b565b6101816103e83660046114f1565b805160209091012090565b6103fb610ea9565b610403610eef565b6000818152600560205260408082205490516302d695fb60e61b8152336004820152602481018590526001600160a01b0390911691908190839063b5a57ec09060440160408051808303816000875af1158015610464573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104889190611526565b9150915080156104f75760015460405163ae51390160e01b8152336004820152602481018490526001600160a01b039091169063ae51390190604401600060405180830381600087803b1580156104de57600080fd5b505af11580156104f2573d6000803e3d6000fd5b505050505b5050505050565b610506610ea9565b8051602082012061051681610f18565b61051e610eef565b600160009054906101000a90046001600160a01b03166001600160a01b03166356e36c1f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610571573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610595919061155b565b8311156105b5576040516365c5c9e160e01b815260040160405180910390fd5b60006105c0826109a0565b905060006105d2828989898988610aa8565b6000848152600560205260409020549091506001600160a01b03166105fb818a8a8a8a87610f4b565b600154604051631f07a12b60e01b8152336004820152602481018b90526001600160a01b0390911690631f07a12b90604401600060405180830381600087803b15801561064757600080fd5b505af115801561065b573d6000803e3d6000fd5b50505050505050505050505050565b6000818152600260205260408120546001600160a01b0316806106905750600092915050565b600083815260026020526040808220548151633fabe5a360e21b815291516001600160a01b039091169163feaf968c9160048083019260a09291908290030181865afa1580156106e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107089190611574565b5091979650505050505050565b61071d610f9a565b61072681610f18565b600081815260056020526040908190205490516377e8a8f360e01b815260048101879052602481018890526044810186905260648101859052608481018490526001600160a01b039091169081906377e8a8f39060a401600060405180830381600087803b15801561079757600080fd5b505af11580156107ab573d6000803e3d6000fd5b5050505050505050505050565b6107c0610f9a565b6107c982610f18565b60008281526003602090815260409182902080546001600160a01b0319166001600160a01b0385169081179091558251858152918201527f27a631f806df69f5736e2af408403723bdc58644d3b14bcadfafcc9e44747c3f910160405180910390a15050565b610837610f9a565b825160208401206000906000818152600460205260409020805460ff19166001179055905061086681846107b8565b6000818152600560205260409081902080546001600160a01b0319166001600160a01b038516179055517f2d364d266dfdb94f54c67aa2fc29bf4f168bdb4637f392f5be7c7a0558e00f5d906108c1908690849086906115cc565b60405180910390a150505050565b6108d7610f9a565b6108e16000610ffa565b565b6108eb610f9a565b6000858152600560205260409081902054905163633557df60e01b8152600481018690526024810185905260448101849052606481018390526001600160a01b0390911690819063633557df906084015b600060405180830381600087803b15801561095657600080fd5b505af115801561096a573d6000803e3d6000fd5b50505050505050505050565b61097e610f9a565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60008181526003602052604081205481906001600160a01b0316806109c9575060009392505050565b6000816001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610a09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2d9190611574565b509198975050505050505050565b610a43610ea9565b81516020830120610a5381610f18565b6000610a60828685610c43565b60008381526005602052604090819020549051637b5d7eb760e01b815260048101889052602481018390529192506001600160a01b0316908190637b5d7eb79060440161093c565b600080610ab48361066a565b905080600003610ac8576000915050610b98565b600083815260026020526040812060010154730D2fBA26620008B39c1307c8e86bA4EE14cC4bFF9063ea75fe3b90899089908d908790610b088c42611053565b6040516001600160e01b031960e089901b1681526004810196909652602486019490945260448501929092526064840152608483015260a482015260c401602060405180830381865af4158015610b63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b87919061155b565b9050610b938882611068565b925050505b9695505050505050565b610baa610f9a565b610bb383610f18565b6040805180820182526001600160a01b038481168083526020808401868152600089815260028352869020945185546001600160a01b031916941693909317845591516001909301929092558251868152908101919091529081018290527fbb4dc1f858dc4ab6018e947383bf61056ed4464166a78c05fb59d69c53f3f4b29060600160405180910390a1505050565b60008381526003602052604081205481906001600160a01b031615801590610c6b5750834210155b15610da857600085815260036020526040808220548151633fabe5a360e21b815291516001600160a01b03909116929182918291859163feaf968c9160048082019260a0929091908290030181865afa158015610ccc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf09190611574565b5093505092509250610d058888858488611080565b866001600160501b0316836001600160501b031603610d2657819450610da3565b604051639a6fc8f560e01b81526001600160501b03881660048201526000906001600160a01b03861690639a6fc8f59060240160a060405180830381865afa158015610d76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9a9190611574565b50919850505050505b505050505b949350505050565b610db8610ea9565b610dc181610f18565b6000818152600560205260408082205481516319b5649d60e01b815291516001600160a01b039091169283926319b5649d926004808301939282900301818387803b158015610e0f57600080fd5b505af1158015610e23573d6000803e3d6000fd5b505050505050565b610e33610f9a565b6001600160a01b038116610e9d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b610ea681610ffa565b50565b60005460ff16156108e15760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610e94565b6001546001600160a01b03166108e157604051636b08325b60e01b815260040160405180910390fd5b60008181526004602052604081205460ff1615159003610ea6576040516333cb97ff60e11b815260040160405180910390fd5b60405163730cb65160e01b81523360048201526024810186905260448101859052606481018490526084810183905260a481018290526001600160a01b0387169063730cb6519060c40161093c565b6000546001600160a01b036101009091041633146108e15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610e94565b600080546001600160a01b03838116610100818102610100600160a81b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b600061105f8284611648565b90505b92915050565b600061105f8261107a85612710611185565b90611191565b60016001600160501b03808516908616111561109a575060005b836001600160501b0316856001600160501b031610156111435760006001600160a01b038316639a6fc8f56110d088600161165b565b6040516001600160e01b031960e084901b1681526001600160501b03909116600482015260240160a060405180830381865afa158015611114573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111389190611574565b508a11159450505050505b836001600160501b0316856001600160501b0316036111625750848211155b801515600003610e23576040516309f274a160e01b815260040160405180910390fd5b600061105f8284611682565b600061105f8284611699565b600080604083850312156111b057600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126111e657600080fd5b813567ffffffffffffffff80821115611201576112016111bf565b604051601f8301601f19908116603f01168101908282118183101715611229576112296111bf565b8160405283815286602085880101111561124257600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600060a0868803121561127a57600080fd5b85359450602086013593506040860135925060608601359150608086013567ffffffffffffffff8111156112ad57600080fd5b6112b9888289016111d5565b9150509295509295909350565b6000602082840312156112d857600080fd5b5035919050565b60008060008060008060c087890312156112f857600080fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b80356001600160a01b038116811461133957600080fd5b919050565b6000806040838503121561135157600080fd5b8235915061136160208401611322565b90509250929050565b60008060006060848603121561137f57600080fd5b833567ffffffffffffffff81111561139657600080fd5b6113a2868287016111d5565b9350506113b160208501611322565b91506113bf60408501611322565b90509250925092565b600080600080600060a086880312156113e057600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b60006020828403121561141557600080fd5b61105f82611322565b6001600160501b0381168114610ea657600080fd5b60008060006060848603121561144857600080fd5b83359250602084013567ffffffffffffffff81111561146657600080fd5b611472868287016111d5565b92505060408401356114838161141e565b809150509250925092565b6000806000606084860312156114a357600080fd5b833592506114b360208501611322565b9150604084013590509250925092565b6000806000606084860312156114d857600080fd5b833592506020840135915060408401356114838161141e565b60006020828403121561150357600080fd5b813567ffffffffffffffff81111561151a57600080fd5b610da8848285016111d5565b6000806040838503121561153957600080fd5b825191506020830151801515811461155057600080fd5b809150509250929050565b60006020828403121561156d57600080fd5b5051919050565b600080600080600060a0868803121561158c57600080fd5b85516115978161141e565b8095505060208601519350604086015192506060860151915060808601516115be8161141e565b809150509295509295909350565b606081526000845180606084015260005b818110156115fa57602081880181015160808684010152016115dd565b506000608082850181019190915260208401959095526001600160a01b0393909316604083015250601f909101601f19160101919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561106257611062611632565b6001600160501b0381811683821601908082111561167b5761167b611632565b5092915050565b808202811582820484141761106257611062611632565b6000826116b657634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212206ce50922d7e2095a7ac6c97f9f1ee8b1df5f3e9fdb5662171e8b0fb6e5844cc164736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101735760003560e01c80638da5cb5b116100de578063c81b270111610097578063d8c4683211610071578063d8c468321461038b578063e1ec18c5146103b4578063f2fde38b146103c7578063fd9a6035146103da57600080fd5b8063c81b270114610342578063d21c2b5b14610355578063d7861d861461036857600080fd5b80638da5cb5b146102cd5780639536c1b0146102e35780639f91a782146102f6578063b483324e14610309578063b54279b41461031c578063c2b6cc9d1461032f57600080fd5b806341446b0a1161013057806341446b0a1461024c5780634abfa5701461025f5780635c975abb146102725780635e7e499614610289578063715018a61461029c578063781e98ae146102a457600080fd5b8063059f8b16146101785780631e1f5af91461019457806325d19adf146101a95780633476d36f146101bc57806336964579146101cf5780633806887f14610221575b600080fd5b61018161271081565b6040519081526020015b60405180910390f35b6101a76101a236600461119d565b6103f3565b005b6101a76101b7366004611262565b6104fe565b6101816101ca3660046112c6565b61066a565b6102026101dd3660046112c6565b600260205260009081526040902080546001909101546001600160a01b039091169082565b604080516001600160a01b03909316835260208301919091520161018b565b600154610234906001600160a01b031681565b6040516001600160a01b03909116815260200161018b565b6101a761025a3660046112df565b610715565b6101a761026d36600461133e565b6107b8565b60005460ff165b604051901515815260200161018b565b6101a761029736600461136a565b61082f565b6101a76108cf565b6102346102b23660046112c6565b6005602052600090815260409020546001600160a01b031681565b60005461010090046001600160a01b0316610234565b6101a76102f13660046113c8565b6108e3565b6101a7610304366004611403565b610976565b6101816103173660046112c6565b6109a0565b6101a761032a366004611433565b610a3b565b61018161033d3660046112df565b610aa8565b6101a761035036600461148e565b610ba2565b6101816103633660046114c3565b610c43565b6102796103763660046112c6565b60046020526000908152604090205460ff1681565b6102346103993660046112c6565b6003602052600090815260409020546001600160a01b031681565b6101a76103c23660046112c6565b610db0565b6101a76103d5366004611403565b610e2b565b6101816103e83660046114f1565b805160209091012090565b6103fb610ea9565b610403610eef565b6000818152600560205260408082205490516302d695fb60e61b8152336004820152602481018590526001600160a01b0390911691908190839063b5a57ec09060440160408051808303816000875af1158015610464573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104889190611526565b9150915080156104f75760015460405163ae51390160e01b8152336004820152602481018490526001600160a01b039091169063ae51390190604401600060405180830381600087803b1580156104de57600080fd5b505af11580156104f2573d6000803e3d6000fd5b505050505b5050505050565b610506610ea9565b8051602082012061051681610f18565b61051e610eef565b600160009054906101000a90046001600160a01b03166001600160a01b03166356e36c1f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610571573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610595919061155b565b8311156105b5576040516365c5c9e160e01b815260040160405180910390fd5b60006105c0826109a0565b905060006105d2828989898988610aa8565b6000848152600560205260409020549091506001600160a01b03166105fb818a8a8a8a87610f4b565b600154604051631f07a12b60e01b8152336004820152602481018b90526001600160a01b0390911690631f07a12b90604401600060405180830381600087803b15801561064757600080fd5b505af115801561065b573d6000803e3d6000fd5b50505050505050505050505050565b6000818152600260205260408120546001600160a01b0316806106905750600092915050565b600083815260026020526040808220548151633fabe5a360e21b815291516001600160a01b039091169163feaf968c9160048083019260a09291908290030181865afa1580156106e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107089190611574565b5091979650505050505050565b61071d610f9a565b61072681610f18565b600081815260056020526040908190205490516377e8a8f360e01b815260048101879052602481018890526044810186905260648101859052608481018490526001600160a01b039091169081906377e8a8f39060a401600060405180830381600087803b15801561079757600080fd5b505af11580156107ab573d6000803e3d6000fd5b5050505050505050505050565b6107c0610f9a565b6107c982610f18565b60008281526003602090815260409182902080546001600160a01b0319166001600160a01b0385169081179091558251858152918201527f27a631f806df69f5736e2af408403723bdc58644d3b14bcadfafcc9e44747c3f910160405180910390a15050565b610837610f9a565b825160208401206000906000818152600460205260409020805460ff19166001179055905061086681846107b8565b6000818152600560205260409081902080546001600160a01b0319166001600160a01b038516179055517f2d364d266dfdb94f54c67aa2fc29bf4f168bdb4637f392f5be7c7a0558e00f5d906108c1908690849086906115cc565b60405180910390a150505050565b6108d7610f9a565b6108e16000610ffa565b565b6108eb610f9a565b6000858152600560205260409081902054905163633557df60e01b8152600481018690526024810185905260448101849052606481018390526001600160a01b0390911690819063633557df906084015b600060405180830381600087803b15801561095657600080fd5b505af115801561096a573d6000803e3d6000fd5b50505050505050505050565b61097e610f9a565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60008181526003602052604081205481906001600160a01b0316806109c9575060009392505050565b6000816001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610a09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2d9190611574565b509198975050505050505050565b610a43610ea9565b81516020830120610a5381610f18565b6000610a60828685610c43565b60008381526005602052604090819020549051637b5d7eb760e01b815260048101889052602481018390529192506001600160a01b0316908190637b5d7eb79060440161093c565b600080610ab48361066a565b905080600003610ac8576000915050610b98565b60008381526002602052604081206001015473__$d7ba7d45ee7cd978cea25afdbab6ba0e5b$__9063ea75fe3b90899089908d908790610b088c42611053565b6040516001600160e01b031960e089901b1681526004810196909652602486019490945260448501929092526064840152608483015260a482015260c401602060405180830381865af4158015610b63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b87919061155b565b9050610b938882611068565b925050505b9695505050505050565b610baa610f9a565b610bb383610f18565b6040805180820182526001600160a01b038481168083526020808401868152600089815260028352869020945185546001600160a01b031916941693909317845591516001909301929092558251868152908101919091529081018290527fbb4dc1f858dc4ab6018e947383bf61056ed4464166a78c05fb59d69c53f3f4b29060600160405180910390a1505050565b60008381526003602052604081205481906001600160a01b031615801590610c6b5750834210155b15610da857600085815260036020526040808220548151633fabe5a360e21b815291516001600160a01b03909116929182918291859163feaf968c9160048082019260a0929091908290030181865afa158015610ccc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf09190611574565b5093505092509250610d058888858488611080565b866001600160501b0316836001600160501b031603610d2657819450610da3565b604051639a6fc8f560e01b81526001600160501b03881660048201526000906001600160a01b03861690639a6fc8f59060240160a060405180830381865afa158015610d76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9a9190611574565b50919850505050505b505050505b949350505050565b610db8610ea9565b610dc181610f18565b6000818152600560205260408082205481516319b5649d60e01b815291516001600160a01b039091169283926319b5649d926004808301939282900301818387803b158015610e0f57600080fd5b505af1158015610e23573d6000803e3d6000fd5b505050505050565b610e33610f9a565b6001600160a01b038116610e9d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b610ea681610ffa565b50565b60005460ff16156108e15760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610e94565b6001546001600160a01b03166108e157604051636b08325b60e01b815260040160405180910390fd5b60008181526004602052604081205460ff1615159003610ea6576040516333cb97ff60e11b815260040160405180910390fd5b60405163730cb65160e01b81523360048201526024810186905260448101859052606481018490526084810183905260a481018290526001600160a01b0387169063730cb6519060c40161093c565b6000546001600160a01b036101009091041633146108e15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610e94565b600080546001600160a01b03838116610100818102610100600160a81b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b600061105f8284611648565b90505b92915050565b600061105f8261107a85612710611185565b90611191565b60016001600160501b03808516908616111561109a575060005b836001600160501b0316856001600160501b031610156111435760006001600160a01b038316639a6fc8f56110d088600161165b565b6040516001600160e01b031960e084901b1681526001600160501b03909116600482015260240160a060405180830381865afa158015611114573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111389190611574565b508a11159450505050505b836001600160501b0316856001600160501b0316036111625750848211155b801515600003610e23576040516309f274a160e01b815260040160405180910390fd5b600061105f8284611682565b600061105f8284611699565b600080604083850312156111b057600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126111e657600080fd5b813567ffffffffffffffff80821115611201576112016111bf565b604051601f8301601f19908116603f01168101908282118183101715611229576112296111bf565b8160405283815286602085880101111561124257600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600060a0868803121561127a57600080fd5b85359450602086013593506040860135925060608601359150608086013567ffffffffffffffff8111156112ad57600080fd5b6112b9888289016111d5565b9150509295509295909350565b6000602082840312156112d857600080fd5b5035919050565b60008060008060008060c087890312156112f857600080fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b80356001600160a01b038116811461133957600080fd5b919050565b6000806040838503121561135157600080fd5b8235915061136160208401611322565b90509250929050565b60008060006060848603121561137f57600080fd5b833567ffffffffffffffff81111561139657600080fd5b6113a2868287016111d5565b9350506113b160208501611322565b91506113bf60408501611322565b90509250925092565b600080600080600060a086880312156113e057600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b60006020828403121561141557600080fd5b61105f82611322565b6001600160501b0381168114610ea657600080fd5b60008060006060848603121561144857600080fd5b83359250602084013567ffffffffffffffff81111561146657600080fd5b611472868287016111d5565b92505060408401356114838161141e565b809150509250925092565b6000806000606084860312156114a357600080fd5b833592506114b360208501611322565b9150604084013590509250925092565b6000806000606084860312156114d857600080fd5b833592506020840135915060408401356114838161141e565b60006020828403121561150357600080fd5b813567ffffffffffffffff81111561151a57600080fd5b610da8848285016111d5565b6000806040838503121561153957600080fd5b825191506020830151801515811461155057600080fd5b809150509250929050565b60006020828403121561156d57600080fd5b5051919050565b600080600080600060a0868803121561158c57600080fd5b85516115978161141e565b8095505060208601519350604086015192506060860151915060808601516115be8161141e565b809150509295509295909350565b606081526000845180606084015260005b818110156115fa57602081880181015160808684010152016115dd565b506000608082850181019190915260208401959095526001600160a01b0393909316604083015250601f909101601f19160101919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561106257611062611632565b6001600160501b0381811683821601908082111561167b5761167b611632565b5092915050565b808202811582820484141761106257611062611632565b6000826116b657634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212206ce50922d7e2095a7ac6c97f9f1ee8b1df5f3e9fdb5662171e8b0fb6e5844cc164736f6c63430008130033",
  "libraries": {
    "MathLibraryDefibets": "0x0D2fBA26620008B39c1307c8e86bA4EE14cC4bFF"
  },
  "devdoc": {
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "claimWinnings(uint256,bytes32)": {
        "details": "Claims the winnings for a user based on a specified token ID and underlying asset hash.",
        "params": {
          "_hash": "The hash of the underlying asset for the bet.",
          "_tokenId": "The token ID representing the bet."
        }
      },
      "executeExpiration(uint256,string,uint80)": {
        "details": "Executes the expiration of a bet based on the specified expiration time and underlying asset.",
        "params": {
          "_expTime": "The expiration time of the bet.",
          "_roundId": "The round id for a valid price of the underlying",
          "_underlying": "The underlying asset for the bet."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setBet(uint256,uint256,uint256,uint256,string)": {
        "details": "Sets a bet for a user in the decentralized betting platform.",
        "params": {
          "_betSize": "The size of the bet.",
          "_expTime": "The expiration time for the bet.",
          "_maxPrice": "The maximum price for the bet.",
          "_minPrice": "The minimum price for the bet.",
          "_underlying": "The underlying asset for the bet."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "DefiBets Manager Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract controls the main functions of the protocol, allowing users to interact with the decentralized betting platform. It manages liquidity, bets, winnings, and expiration of bets.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 176,
        "contract": "src/core/DefiBetsManager.sol:DefiBetsManager",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 53,
        "contract": "src/core/DefiBetsManager.sol:DefiBetsManager",
        "label": "_owner",
        "offset": 1,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4363,
        "contract": "src/core/DefiBetsManager.sol:DefiBetsManager",
        "label": "pointTracker",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4368,
        "contract": "src/core/DefiBetsManager.sol:DefiBetsManager",
        "label": "underlyingIVFeeds",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(IVFeed)4358_storage)"
      },
      {
        "astId": 4372,
        "contract": "src/core/DefiBetsManager.sol:DefiBetsManager",
        "label": "underlyingPriceFeeds",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 4376,
        "contract": "src/core/DefiBetsManager.sol:DefiBetsManager",
        "label": "validUnderlying",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 4380,
        "contract": "src/core/DefiBetsManager.sol:DefiBetsManager",
        "label": "defiBetsContracts",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(IVFeed)4358_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct DefiBetsManager.IVFeed)",
        "numberOfBytes": "32",
        "value": "t_struct(IVFeed)4358_storage"
      },
      "t_struct(IVFeed)4358_storage": {
        "encoding": "inplace",
        "label": "struct DefiBetsManager.IVFeed",
        "members": [
          {
            "astId": 4355,
            "contract": "src/core/DefiBetsManager.sol:DefiBetsManager",
            "label": "feedAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4357,
            "contract": "src/core/DefiBetsManager.sol:DefiBetsManager",
            "label": "period",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}