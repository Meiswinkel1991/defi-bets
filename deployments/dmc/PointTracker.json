{
  "address": "0x63f00fdb6b3388f40992b6de0E85358A739C5802",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startingPoints",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "PointTracker__AccessForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PointTracker__AccountAlreadyActivated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PointTracker__AccountNotEligible",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PointTracker__BetTimeBeforeSeasonStart",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PointTracker__NotEndOfSeasonReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PointTracker__NotEnoughPoints",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PointTracker__PlayerNotActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PointTracker__SeasonIsActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PointTracker__SeasonIsNotActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PointTracker__SeasonOutOfBounds",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "season",
          "type": "uint256"
        }
      ],
      "name": "AccountActivation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pointsAdded",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newScore",
          "type": "uint256"
        }
      ],
      "name": "PointsAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pointsRemoved",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newScore",
          "type": "uint256"
        }
      ],
      "name": "PointsRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "season",
          "type": "uint256"
        }
      ],
      "name": "SeasonFinished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "season",
          "type": "uint256"
        }
      ],
      "name": "SeasonStarted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MINIMUM_DFI_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activateAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_player",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_points",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expTime",
          "type": "uint256"
        }
      ],
      "name": "addPointsForPlayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finishSeason",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestSeason",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_season",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_player",
          "type": "address"
        }
      ],
      "name": "getPlayerPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSeasonEndDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_season",
          "type": "uint256"
        }
      ],
      "name": "getSeasonStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_startingPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_season",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_player",
          "type": "address"
        }
      ],
      "name": "isAccountActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_player",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_points",
          "type": "uint256"
        }
      ],
      "name": "reducePointsForPlayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_endOfSeason",
          "type": "uint256"
        }
      ],
      "name": "startSeason",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xddceb2ce6eb4b09dfb680860327ae1034a87fe6db9e502b9202fe00937afb88c",
  "receipt": {
    "to": null,
    "from": "0xd4Fa4ee93D7D27c1c4Be36bfBa67183dD4320123",
    "contractAddress": "0x63f00fdb6b3388f40992b6de0E85358A739C5802",
    "transactionIndex": 0,
    "gasUsed": "683228",
    "logsBloom": "0x
    "blockHash": "0x0234da40a99fc9fa45162e2262b6b41fc10474e1e2edcddb80069d9e34527ed4",
    "transactionHash": "0xddceb2ce6eb4b09dfb680860327ae1034a87fe6db9e502b9202fe00937afb88c",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 62199,
        "transactionHash": "0xddceb2ce6eb4b09dfb680860327ae1034a87fe6db9e502b9202fe00937afb88c",
        "address": "0x63f00fdb6b3388f40992b6de0E85358A739C5802",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d4fa4ee93d7d27c1c4be36bfba67183dd4320123"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x0234da40a99fc9fa45162e2262b6b41fc10474e1e2edcddb80069d9e34527ed4"
      }
    ],
    "blockNumber": 62199,
    "cumulativeGasUsed": "683228",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x844e98c9fdfE1cbda5f58194438dA25ed41d1BC9",
    1000
  ],
  "numDeployments": 1,
  "solcInputHash": "0ff59523740e82eddf940b5393eb0ade",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startingPoints\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"PointTracker__AccessForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PointTracker__AccountAlreadyActivated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PointTracker__AccountNotEligible\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PointTracker__BetTimeBeforeSeasonStart\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PointTracker__NotEndOfSeasonReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PointTracker__NotEnoughPoints\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PointTracker__PlayerNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PointTracker__SeasonIsActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PointTracker__SeasonIsNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PointTracker__SeasonOutOfBounds\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"season\",\"type\":\"uint256\"}],\"name\":\"AccountActivation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pointsAdded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newScore\",\"type\":\"uint256\"}],\"name\":\"PointsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pointsRemoved\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newScore\",\"type\":\"uint256\"}],\"name\":\"PointsRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"season\",\"type\":\"uint256\"}],\"name\":\"SeasonFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"season\",\"type\":\"uint256\"}],\"name\":\"SeasonStarted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINIMUM_DFI_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activateAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_points\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expTime\",\"type\":\"uint256\"}],\"name\":\"addPointsForPlayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishSeason\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestSeason\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_season\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getPlayerPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSeasonEndDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_season\",\"type\":\"uint256\"}],\"name\":\"getSeasonStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_startingPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_season\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"isAccountActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_points\",\"type\":\"uint256\"}],\"name\":\"reducePointsForPlayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endOfSeason\",\"type\":\"uint256\"}],\"name\":\"startSeason\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/core/PointTracker.sol\":\"PointTracker\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031373032303333313338333736\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/core/PointTracker.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract PointTracker is Ownable {\\n    /* === Errors === */\\n    error PointTracker__SeasonOutOfBounds();\\n    error PointTracker__AccessForbidden();\\n    error PointTracker__AccountAlreadyActivated();\\n    error PointTracker__AccountNotEligible();\\n    error PointTracker__SeasonIsNotActive();\\n    error PointTracker__PlayerNotActive();\\n    error PointTracker__SeasonIsActive();\\n    error PointTracker__NotEndOfSeasonReached();\\n    error PointTracker__NotEnoughPoints();\\n    error PointTracker__BetTimeBeforeSeasonStart();\\n\\n    uint256 public constant MINIMUM_DFI_AMOUNT = 0.1 ether;\\n    uint256 public immutable i_startingPoints;\\n\\n    /* === State Varibales === */\\n    address private manager;\\n    uint256 private season;\\n\\n    uint256 private endOfSeason;\\n\\n    bool private seasonActive;\\n\\n    mapping(uint256 => mapping(address => uint256)) private pointsInSeason;\\n    mapping(uint256 => mapping(address => bool)) private isActivated;\\n    mapping(uint256 => uint256) private seasonStartTimes;\\n    \\n\\n    /* === Events === */\\n    event AccountActivation(address indexed player, uint256 season);\\n    event SeasonFinished(uint256 season);\\n    event SeasonStarted(uint256 season);\\n    event PointsAdded(address indexed player, uint256 pointsAdded, uint256 newScore);\\n    event PointsRemoved(address indexed player, uint256 pointsRemoved, uint256 newScore);\\n\\n    /* === Modifier === */\\n    modifier seasonIsActive() {\\n        if (seasonActive == false) {\\n            revert PointTracker__SeasonIsNotActive();\\n        }\\n\\n        _;\\n    }\\n\\n    modifier seasonNotActive() {\\n        if (seasonActive == true) {\\n            revert PointTracker__SeasonIsActive();\\n        }\\n        _;\\n    }\\n\\n    constructor(address _manager, uint256 startingPoints) {\\n        manager = _manager;\\n        i_startingPoints = startingPoints;\\n    }\\n\\n    /* === Mutation Functions === */\\n\\n    function addPointsForPlayer(address _player, uint256 _points,uint256 _expTime) external seasonIsActive {\\n        _isManager();\\n        _isPlayerActive(_player);\\n\\n        if(_expTime < getSeasonStartTime(season)){\\n            revert PointTracker__BetTimeBeforeSeasonStart();\\n        }\\n\\n        pointsInSeason[season][_player] += _points;\\n\\n        emit PointsAdded(_player, _points, pointsInSeason[season][_player]);\\n    }\\n\\n    function reducePointsForPlayer(address _player, uint256 _points) external seasonIsActive {\\n        _isManager();\\n        _isPlayerActive(_player);\\n        _hasEnoughPoints(_player, _points);\\n\\n        pointsInSeason[season][_player] -= _points;\\n\\n        emit PointsRemoved(_player, _points, pointsInSeason[season][_player]);\\n    }\\n\\n    function activateAccount() external seasonIsActive {\\n        if (isActivated[season][msg.sender] == true) {\\n            revert PointTracker__AccountAlreadyActivated();\\n        }\\n\\n        if (msg.sender.balance < MINIMUM_DFI_AMOUNT) {\\n            revert PointTracker__AccountNotEligible();\\n        }\\n\\n        pointsInSeason[season][msg.sender] = i_startingPoints;\\n        isActivated[season][msg.sender] = true;\\n\\n        emit AccountActivation(msg.sender, season);\\n    }\\n\\n    function finishSeason() external onlyOwner seasonIsActive {\\n        if (block.timestamp < endOfSeason) {\\n            revert PointTracker__NotEndOfSeasonReached();\\n        }\\n        seasonActive = false;\\n\\n        emit SeasonFinished(season);\\n    }\\n\\n    function startSeason(uint256 _endOfSeason) external onlyOwner seasonNotActive {\\n        seasonActive = true;\\n\\n        season++;\\n\\n        endOfSeason = _endOfSeason;\\n\\n        seasonStartTimes[season] = block.timestamp;\\n\\n        emit SeasonStarted(season);\\n    }\\n\\n    /* === Internal Functions === */\\n\\n    function _isManager() internal view {\\n        if (msg.sender != manager) {\\n            revert PointTracker__AccessForbidden();\\n        }\\n    }\\n\\n    function _isPlayerActive(address _player) internal view {\\n        if (isActivated[season][_player] == false) {\\n            revert PointTracker__PlayerNotActive();\\n        }\\n    }\\n\\n    function _hasEnoughPoints(address _player, uint256 _points) internal view {\\n        if (pointsInSeason[season][_player] < _points) {\\n            revert PointTracker__NotEnoughPoints();\\n        }\\n    }\\n\\n    /* === Pure / View Functions === */\\n\\n    function getManager() public view returns (address) {\\n        return manager;\\n    }\\n\\n    function getLatestSeason() public view returns (uint256) {\\n        return season;\\n    }\\n\\n    function getPlayerPoints(uint256 _season, address _player) public view returns (uint256) {\\n        if (_season > season) {\\n            revert PointTracker__SeasonOutOfBounds();\\n        }\\n\\n        return pointsInSeason[_season][_player];\\n    }\\n\\n    function getSeasonEndDate() external view returns (uint256) {\\n        return endOfSeason;\\n    }\\n\\n    function isAccountActive(uint256 _season, address _player) public view returns (bool) {\\n        return isActivated[_season][_player];\\n    }\\n\\n    function getSeasonStartTime(uint256 _season) public view returns(uint256){\\n        return seasonStartTimes[_season];\\n    }\\n}\\n\",\"keccak256\":\"0xa2021c4c7f0cfa774125260e163d97d5ad15b01a4329aaa107e43c9e5d68bd54\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610b8b380380610b8b83398101604081905261002f916100b1565b61003833610061565b600180546001600160a01b0319166001600160a01b0393909316929092179091556080526100eb565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080604083850312156100c457600080fd5b82516001600160a01b03811681146100db57600080fd5b6020939093015192949293505050565b608051610a7e61010d6000396000818161015201526104ee0152610a7e6000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063715018a611610097578063e0abfabc11610066578063e0abfabc146101f8578063ea6296e414610241578063f2fde38b14610250578063f4d73a501461026357600080fd5b8063715018a6146101b25780638da5cb5b146101ba578063bb68ab94146101df578063d5009584146101e757600080fd5b806353fb1cd2116100d357806353fb1cd21461017c57806356e36c1f1461018f5780636f26f7d814610197578063703dbfe41461019f57600080fd5b80630e0b8f43146101055780631f07a12b146101385780632b5d482c1461014d5780633212160014610174575b600080fd5b610125610113366004610913565b60009081526007602052604090205490565b6040519081526020015b60405180910390f35b61014b610146366004610948565b610276565b005b6101257f000000000000000000000000000000000000000000000000000000000000000081565b61014b610354565b61012561018a366004610972565b6103e9565b600354610125565b61014b610439565b61014b6101ad366004610913565b61056c565b61014b610611565b6000546001600160a01b03165b6040516001600160a01b03909116815260200161012f565b600254610125565b6001546001600160a01b03166101c7565b610231610206366004610972565b60009182526006602090815260408084206001600160a01b0393909316845291905290205460ff1690565b604051901515815260200161012f565b61012567016345785d8a000081565b61014b61025e36600461099e565b610625565b61014b6102713660046109c0565b6106a3565b60045460ff16151560000361029e57604051639238013b60e01b815260040160405180910390fd5b6102a66107aa565b6102af826107d5565b6102b9828261081f565b60025460009081526005602090815260408083206001600160a01b0386168452909152812080548392906102ee908490610a09565b909155505060025460009081526005602090815260408083206001600160a01b03861680855290835292819020548151858152928301527f2b58a342147e52cafbfa184a8d6a3583ffe7664f958cdf1c00af5cf9c02ccb46910160405180910390a25050565b61035c610869565b60045460ff16151560000361038457604051639238013b60e01b815260040160405180910390fd5b6003544210156103a75760405163e3e6e8ff60e01b815260040160405180910390fd5b6004805460ff191690556002546040519081527f4233cabd0860c720cda964bd3080f63f47e4e85fd50fc062fa13daa309fa3a9d9060200160405180910390a1565b600060025483111561040e576040516339ff63d960e21b815260040160405180910390fd5b5060008281526005602090815260408083206001600160a01b03851684529091529020545b92915050565b60045460ff16151560000361046157604051639238013b60e01b815260040160405180910390fd5b600254600090815260066020908152604080832033845290915290205460ff1615156001036104a35760405163610cb88b60e01b815260040160405180910390fd5b67016345785d8a0000333110156104cd5760405163afab280b60e01b815260040160405180910390fd5b600280546000908152600560209081526040808320338085529083528184207f00000000000000000000000000000000000000000000000000000000000000009055845484526006835281842081855290925291829020805460ff19166001179055915490517f1c7b9bb5427e707318fed580d5afbc7fbd2c7ec45e5e44f1d78a82db5d57fae4916105629190815260200190565b60405180910390a2565b610574610869565b60045460ff16151560010361059c57604051633bf59b2760e11b815260040160405180910390fd5b6004805460ff19166001179055600280549060006105b983610a1c565b9091555050600381905560028054600090815260076020908152604091829020429055915490519081527fe2046d333900871694b2fb421975b907ac5d93052201a0e259fa0664d9dbdf1d910160405180910390a150565b610619610869565b61062360006108c3565b565b61062d610869565b6001600160a01b0381166106975760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6106a0816108c3565b50565b60045460ff1615156000036106cb57604051639238013b60e01b815260040160405180910390fd5b6106d36107aa565b6106dc836107d5565b60025460009081526007602052604090205481101561070e5760405163bfc49ab160e01b815260040160405180910390fd5b60025460009081526005602090815260408083206001600160a01b038716845290915281208054849290610743908490610a35565b909155505060025460009081526005602090815260408083206001600160a01b03871680855290835292819020548151868152928301527f27909057bad6ce6fc50ecea73759a0da1ec7790bbb0144577bf31372a78b3e64910160405180910390a2505050565b6001546001600160a01b0316331461062357604051637a8c758960e11b815260040160405180910390fd5b60025460009081526006602090815260408083206001600160a01b038516845290915281205460ff16151590036106a057604051639f284f7d60e01b815260040160405180910390fd5b60025460009081526005602090815260408083206001600160a01b03861684529091529020548111156108655760405163048b40c960e51b815260040160405180910390fd5b5050565b6000546001600160a01b031633146106235760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161068e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561092557600080fd5b5035919050565b80356001600160a01b038116811461094357600080fd5b919050565b6000806040838503121561095b57600080fd5b6109648361092c565b946020939093013593505050565b6000806040838503121561098557600080fd5b823591506109956020840161092c565b90509250929050565b6000602082840312156109b057600080fd5b6109b98261092c565b9392505050565b6000806000606084860312156109d557600080fd5b6109de8461092c565b95602085013595506040909401359392505050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610433576104336109f3565b600060018201610a2e57610a2e6109f3565b5060010190565b80820180821115610433576104336109f356fea2646970667358221220e502a3b906531a62e046f6a8400d2c9f4b31056eb3def312a9c6230968b889e964736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c8063715018a611610097578063e0abfabc11610066578063e0abfabc146101f8578063ea6296e414610241578063f2fde38b14610250578063f4d73a501461026357600080fd5b8063715018a6146101b25780638da5cb5b146101ba578063bb68ab94146101df578063d5009584146101e757600080fd5b806353fb1cd2116100d357806353fb1cd21461017c57806356e36c1f1461018f5780636f26f7d814610197578063703dbfe41461019f57600080fd5b80630e0b8f43146101055780631f07a12b146101385780632b5d482c1461014d5780633212160014610174575b600080fd5b610125610113366004610913565b60009081526007602052604090205490565b6040519081526020015b60405180910390f35b61014b610146366004610948565b610276565b005b6101257f000000000000000000000000000000000000000000000000000000000000000081565b61014b610354565b61012561018a366004610972565b6103e9565b600354610125565b61014b610439565b61014b6101ad366004610913565b61056c565b61014b610611565b6000546001600160a01b03165b6040516001600160a01b03909116815260200161012f565b600254610125565b6001546001600160a01b03166101c7565b610231610206366004610972565b60009182526006602090815260408084206001600160a01b0393909316845291905290205460ff1690565b604051901515815260200161012f565b61012567016345785d8a000081565b61014b61025e36600461099e565b610625565b61014b6102713660046109c0565b6106a3565b60045460ff16151560000361029e57604051639238013b60e01b815260040160405180910390fd5b6102a66107aa565b6102af826107d5565b6102b9828261081f565b60025460009081526005602090815260408083206001600160a01b0386168452909152812080548392906102ee908490610a09565b909155505060025460009081526005602090815260408083206001600160a01b03861680855290835292819020548151858152928301527f2b58a342147e52cafbfa184a8d6a3583ffe7664f958cdf1c00af5cf9c02ccb46910160405180910390a25050565b61035c610869565b60045460ff16151560000361038457604051639238013b60e01b815260040160405180910390fd5b6003544210156103a75760405163e3e6e8ff60e01b815260040160405180910390fd5b6004805460ff191690556002546040519081527f4233cabd0860c720cda964bd3080f63f47e4e85fd50fc062fa13daa309fa3a9d9060200160405180910390a1565b600060025483111561040e576040516339ff63d960e21b815260040160405180910390fd5b5060008281526005602090815260408083206001600160a01b03851684529091529020545b92915050565b60045460ff16151560000361046157604051639238013b60e01b815260040160405180910390fd5b600254600090815260066020908152604080832033845290915290205460ff1615156001036104a35760405163610cb88b60e01b815260040160405180910390fd5b67016345785d8a0000333110156104cd5760405163afab280b60e01b815260040160405180910390fd5b600280546000908152600560209081526040808320338085529083528184207f00000000000000000000000000000000000000000000000000000000000000009055845484526006835281842081855290925291829020805460ff19166001179055915490517f1c7b9bb5427e707318fed580d5afbc7fbd2c7ec45e5e44f1d78a82db5d57fae4916105629190815260200190565b60405180910390a2565b610574610869565b60045460ff16151560010361059c57604051633bf59b2760e11b815260040160405180910390fd5b6004805460ff19166001179055600280549060006105b983610a1c565b9091555050600381905560028054600090815260076020908152604091829020429055915490519081527fe2046d333900871694b2fb421975b907ac5d93052201a0e259fa0664d9dbdf1d910160405180910390a150565b610619610869565b61062360006108c3565b565b61062d610869565b6001600160a01b0381166106975760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6106a0816108c3565b50565b60045460ff1615156000036106cb57604051639238013b60e01b815260040160405180910390fd5b6106d36107aa565b6106dc836107d5565b60025460009081526007602052604090205481101561070e5760405163bfc49ab160e01b815260040160405180910390fd5b60025460009081526005602090815260408083206001600160a01b038716845290915281208054849290610743908490610a35565b909155505060025460009081526005602090815260408083206001600160a01b03871680855290835292819020548151868152928301527f27909057bad6ce6fc50ecea73759a0da1ec7790bbb0144577bf31372a78b3e64910160405180910390a2505050565b6001546001600160a01b0316331461062357604051637a8c758960e11b815260040160405180910390fd5b60025460009081526006602090815260408083206001600160a01b038516845290915281205460ff16151590036106a057604051639f284f7d60e01b815260040160405180910390fd5b60025460009081526005602090815260408083206001600160a01b03861684529091529020548111156108655760405163048b40c960e51b815260040160405180910390fd5b5050565b6000546001600160a01b031633146106235760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161068e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561092557600080fd5b5035919050565b80356001600160a01b038116811461094357600080fd5b919050565b6000806040838503121561095b57600080fd5b6109648361092c565b946020939093013593505050565b6000806040838503121561098557600080fd5b823591506109956020840161092c565b90509250929050565b6000602082840312156109b057600080fd5b6109b98261092c565b9392505050565b6000806000606084860312156109d557600080fd5b6109de8461092c565b95602085013595506040909401359392505050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610433576104336109f3565b600060018201610a2e57610a2e6109f3565b5060010190565b80820180821115610433576104336109f356fea2646970667358221220e502a3b906531a62e046f6a8400d2c9f4b31056eb3def312a9c6230968b889e964736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "src/core/PointTracker.sol:PointTracker",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5235,
        "contract": "src/core/PointTracker.sol:PointTracker",
        "label": "manager",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5237,
        "contract": "src/core/PointTracker.sol:PointTracker",
        "label": "season",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 5239,
        "contract": "src/core/PointTracker.sol:PointTracker",
        "label": "endOfSeason",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 5241,
        "contract": "src/core/PointTracker.sol:PointTracker",
        "label": "seasonActive",
        "offset": 0,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 5247,
        "contract": "src/core/PointTracker.sol:PointTracker",
        "label": "pointsInSeason",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 5253,
        "contract": "src/core/PointTracker.sol:PointTracker",
        "label": "isActivated",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 5257,
        "contract": "src/core/PointTracker.sol:PointTracker",
        "label": "seasonStartTimes",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}