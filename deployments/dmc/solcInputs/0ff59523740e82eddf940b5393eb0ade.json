{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\n     * that `ownerOf(tokenId)` is `a`.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\n        _balances[account] += amount;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "src/core/DefiBets.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"../interface/core/IDefiBets.sol\";\n\ncontract DefiBets is Ownable, IDefiBets {\n    /* === Errors === */\n    error DefiBets__Forbidden();\n    error DefiBets__NoValidExpTime();\n    error DefiBets__NoValidPrice();\n    error DefiBets__NoValidWinningPrice();\n    error DefiBets__OutOfActiveExpTimeRange();\n    error DefiBets__AlreadyInitialized();\n    error DefiBets__ParameterNotInitialized();\n    error DefiBets_NoValidParamters();\n    error DefiBets__TokenDontExists();\n    error DefiBets__NotExecutableTime();\n    error DefiBets__NotTheTokenOwner();\n    error DefiBets__NotEpxired();\n    error DefiBets__NotActive();\n    error DefiBets__AlreadyClaimed();\n\n    using SafeMath for uint256;\n    using Counters for Counters.Counter;\n\n    struct ExpTimeInfo {\n        uint256 expPrice;\n        uint256 slotSize;\n        bool finished;\n        bool init;\n    }\n\n    struct Bet {\n        address account;\n        uint256 expTime;\n        uint256 betSize;\n        uint256 profit;\n        uint256 minPrice;\n        uint256 maxPrice;\n        bool claimed;\n    }\n\n    uint256 private constant MULTIPLIER = 1000000;\n\n    /* ====== State Variables ====== */\n    Counters.Counter public betIDs;\n    string public underlying;\n    bool private initialized;\n    uint256 public minBetDuration;\n    uint256 public maxBetDuration;\n    uint256 public slot; /* Steps of valid bet prices */\n    uint256 public timeDelta;\n\n    bool public isActive;\n\n    //All mappings can be searched with the expiration date.\n    uint256 private dependentTimeStamp;\n    uint256 public lastActiveExpTime;\n    mapping(uint256 => bool) private validExpTime;\n    mapping(uint256 => ExpTimeInfo) public expTimeInfos;\n    mapping(uint256 => Bet) private bets;\n\n    mapping(uint256 => mapping(uint256 => uint256)) public betsWinningSlots;\n\n    address public defiBetsManager;\n\n    /* ====== Events ====== */\n    event EpxirationTimeCreated(uint256 expTime);\n\n    event BetPlaced(\n        address indexed account,\n        uint256 betSize,\n        uint256 profit,\n        uint256 expDate,\n        uint256 minPrice,\n        uint256 maxPrice,\n        uint256 betID\n    );\n    event Claimed(address indexed account, uint256 betID, bool profit);\n    event Expiration(uint256 indexed expTime, uint256 expPrice);\n    event BetParameterUpdated(\n        uint256 minBetDuration, uint256 maxBetDuration, uint256 slot, uint256 timeDelta, uint256 dependentTimeStamp\n    );\n\n    /**\n     * @param _defiBetsManager - the manager and owner of the contract.\n     */\n    constructor(string memory _underlying, address _defiBetsManager, uint256 _timeDelta) {\n        underlying = _underlying;\n\n        defiBetsManager = _defiBetsManager;\n\n        isActive = true;\n\n        timeDelta = _timeDelta; // 60 * 60 * 24  = 24 h\n    }\n\n    /* ====== Mutation Functions ====== */\n    function setBetForAccount(\n        address _account,\n        uint256 _betSize,\n        uint256 _minPrice,\n        uint256 _maxPrice,\n        uint256 _expTime,\n        uint256 _winning\n    ) external {\n        _isDefiBetManager();\n        _isInitialized();\n\n        // validate input paramaters\n        _validExpirationTime(_expTime);\n        _isValidActiveTimeRange(_expTime);\n        _validPriceRange(_minPrice, _maxPrice);\n\n        _createBetData(_account, _expTime, _betSize, _winning, _minPrice, _maxPrice);\n\n        //Attention: This function has high gas costs!!!!\n        _distributeWinningsToSlots(_minPrice, _maxPrice, _winning, _expTime);\n\n        emit BetPlaced(_account, _betSize, _winning, _expTime, _minPrice, _maxPrice, betIDs.current());\n    }\n\n    function claimForAccount(address _account, uint256 _betID) external returns (uint256, bool,uint256) {\n        _isDefiBetManager();\n        _isClaimed(_betID);\n\n        Bet memory _betTokenInfo = getBetData(_betID);\n        ExpTimeInfo memory _expInfo = expTimeInfos[_betTokenInfo.expTime];\n\n        if (_expInfo.finished != true) {\n            revert DefiBets__NotEpxired();\n        }\n\n        if (ownerOf(_betID) != _account) {\n            revert DefiBets__NotTheTokenOwner();\n        }\n\n        uint256 _tokensForClaim;\n        bool _profits;\n\n        if (_expInfo.expPrice >= _betTokenInfo.minPrice && _expInfo.expPrice < _betTokenInfo.maxPrice) {\n            _tokensForClaim = _betTokenInfo.profit;\n\n            _profits = true;\n        }\n\n        bets[_betID].claimed = true;\n\n        emit Claimed(_account, _betID, _profits);\n\n        return (_tokensForClaim, _profits,_betTokenInfo.expTime);\n    }\n\n    function performExpiration(uint256 _expTime, uint256 _expPrice) external {\n        _isDefiBetManager();\n        _isInitialized();\n\n        _validExpirationTime(_expTime);\n\n        if (_expTime > block.timestamp) {\n            revert DefiBets__NotExecutableTime();\n        }\n\n        //update the data\n\n        expTimeInfos[_expTime].finished = true;\n        expTimeInfos[_expTime].expPrice = _expPrice;\n\n        emit Expiration(_expTime, _expPrice);\n    }\n\n    function initializeNewExpTime() external {\n        _isDefiBetManager();\n\n        _isActive();\n\n        _isNextExpTimeValid();\n\n        uint256 _expTime = dependentTimeStamp > lastActiveExpTime\n            ? dependentTimeStamp.add(timeDelta)\n            : lastActiveExpTime.add(timeDelta);\n\n        _initExpTime(_expTime);\n\n        lastActiveExpTime = _expTime;\n    }\n\n    /* ====== Setup Function ====== */\n\n    function initializeData(\n        uint256 _dependentTimeStamp,\n        uint256 _minBetDuration,\n        uint256 _maxBetDuration,\n        uint256 _slot\n    ) external {\n        _isDefiBetManager();\n\n        _isNotIntialized();\n\n        setBetParamater(_minBetDuration, _maxBetDuration, _slot, timeDelta, _dependentTimeStamp);\n\n        _initializeExpTimes();\n\n        initialized = true;\n    }\n\n    function setBetParamater(\n        uint256 _minBetDuration,\n        uint256 _maxBetDuration,\n        uint256 _slot,\n        uint256 _timeDelta,\n        uint256 _dependentTimeStamp\n    ) public {\n        _isDefiBetManager();\n        if (_minBetDuration >= _maxBetDuration) {\n            revert DefiBets_NoValidParamters();\n        }\n\n        minBetDuration = _minBetDuration;\n        maxBetDuration = _maxBetDuration;\n        slot = _slot;\n        timeDelta = _timeDelta;\n        dependentTimeStamp = _dependentTimeStamp;\n\n        emit BetParameterUpdated(minBetDuration, maxBetDuration, slot, timeDelta, dependentTimeStamp);\n    }\n\n    function stop() external onlyOwner {\n        isActive = false;\n    }\n\n    /* ====== Internal Functions ====== */\n\n    function _createBetData(\n        address _account,\n        uint256 _expTime,\n        uint256 _betSize,\n        uint256 _winning,\n        uint256 _minPrice,\n        uint256 _maxPrice\n    ) internal {\n        betIDs.increment();\n        uint256 newTokenId = betIDs.current();\n\n        Bet memory _newBet;\n\n        _newBet.account = _account;\n        _newBet.betSize = _betSize;\n        _newBet.minPrice = _minPrice;\n        _newBet.maxPrice = _maxPrice;\n        _newBet.profit = _winning;\n        _newBet.expTime = _expTime;\n\n        bets[newTokenId] = _newBet;\n    }\n\n    function _distributeWinningsToSlots(uint256 _minPrice, uint256 _maxPrice, uint256 _winning, uint256 _expTime)\n        internal\n    {\n        uint256 _slotAmount = (_maxPrice.sub(_minPrice)).div(slot);\n\n        for (uint256 i = 0; i < _slotAmount; i++) {\n            uint256 _slot = _minPrice.add(i.mul(slot));\n\n            uint256 _slotWinning = betsWinningSlots[_expTime][_slot];\n\n            betsWinningSlots[_expTime][_slot] = _slotWinning.add(_winning);\n        }\n    }\n\n    function _isDefiBetManager() internal view {\n        if (msg.sender != defiBetsManager) {\n            revert DefiBets__Forbidden();\n        }\n    }\n\n    function _validExpirationTime(uint256 _expTime) internal view {\n        if (expTimeInfos[_expTime].init != true) {\n            revert DefiBets__NoValidExpTime();\n        }\n    }\n\n    function _isValidActiveTimeRange(uint256 _expTime) internal view {\n        if (_expTime < block.timestamp.add(minBetDuration) || _expTime > block.timestamp.add(maxBetDuration)) {\n            revert DefiBets__OutOfActiveExpTimeRange();\n        }\n    }\n\n    function _validPriceRange(uint256 minPrice, uint256 maxPrice) internal view {\n        if ((0 != (minPrice % slot)) || (0 != (maxPrice % slot)) || (minPrice >= maxPrice)) {\n            revert DefiBets__NoValidPrice();\n        }\n    }\n\n    function _isNotIntialized() internal view {\n        if (initialized) {\n            revert DefiBets__AlreadyInitialized();\n        }\n    }\n\n    function _isActive() internal view {\n        if (isActive == false) {\n            revert DefiBets__NotActive();\n        }\n    }\n\n    function _initializeExpTimes() internal {\n        uint256 _expTime = dependentTimeStamp;\n\n        _initExpTime(_expTime);\n\n        lastActiveExpTime = dependentTimeStamp;\n    }\n\n    function _initExpTime(uint256 _expTime) internal {\n        expTimeInfos[_expTime].init = true;\n        expTimeInfos[_expTime].slotSize = slot;\n\n        emit EpxirationTimeCreated(_expTime);\n    }\n\n    function _isInitialized() internal view {\n        if (initialized != true) {\n            revert DefiBets__ParameterNotInitialized();\n        }\n    }\n\n    function _isNextExpTimeValid() internal view {\n        uint256 _nextExpTime = lastActiveExpTime.add(timeDelta);\n        if (_nextExpTime > block.timestamp.add(maxBetDuration)) {\n            revert DefiBets__OutOfActiveExpTimeRange();\n        }\n    }\n\n    function _isClaimed(uint256 _tokenId) internal view {\n        if (bets[_tokenId].claimed) {\n            revert DefiBets__AlreadyClaimed();\n        }\n    }\n\n    /* ====== Pure/View Functions ====== */\n\n    function getDependentExpTime() public view returns (uint256) {\n        return dependentTimeStamp;\n    }\n\n    function getBetData(uint256 _betID) public view returns (Bet memory) {\n        if (_betID > betIDs.current()) {\n            revert DefiBets__TokenDontExists();\n        }\n\n        return bets[_betID];\n    }\n\n    function ownerOf(uint256 _betID) public view returns (address) {\n        return bets[_betID].account;\n    }\n}\n"
    },
    "src/core/DefiBetsManager.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nimport \"../interface/core/IDefiBets.sol\";\nimport \"../interface/core/IPointTracker.sol\";\n\n// Library import\nimport \"../lib/MathLibraryDefiBets.sol\";\n\nerror DefiBetsManager__NoValidUnderlying();\nerror DefiBetsManager__NoLiquidity();\nerror DefiBetsManager__FeeNotAllowed();\nerror DefiBetsManager__FeeWouldBeTooSmall();\nerror DefiBetsManager__ParamNull();\nerror DefiBetsManager__NotValidRoundId();\nerror DefiBetsManager__AccessForbidden();\nerror DefiBetsManager__ExpTimeNotValid();\nerror DefiBetsManager__NoPointTrackerSet();\n\n/**\n * @title DefiBets Manager Contract\n * @notice This contract controls the main functions of the protocol, allowing users to interact with the decentralized betting platform. It manages liquidity, bets, winnings, and expiration of bets.\n */\ncontract DefiBetsManager is Pausable, Ownable {\n    using SafeMath for uint256;\n\n    struct IVFeed {\n        address feedAddress;\n        uint256 period;\n    }\n\n    uint256 public constant MULTIPLIER = 10000;\n\n    /* ====== State Variables ====== */\n\n    address public pointTracker;\n\n    mapping(bytes32 => IVFeed) public underlyingIVFeeds;\n    mapping(bytes32 => address) public underlyingPriceFeeds;\n    mapping(bytes32 => bool) public validUnderlying;\n    mapping(bytes32 => address) public defiBetsContracts;\n\n    /* ====== Events ====== */\n    event UnderlyingAdded(string underlying, bytes32 underlyingHash, address defiBets);\n    event PriceFeedUpdated(bytes32 underlying, address priceFeed);\n    event FeeUpdated(uint256 feePpm);\n    event IVFeedUpdated(bytes32 underlying, address feed, uint256 period);\n    event PayoutFactorUpdated(uint256 payoutFactor);\n\n    /* ====== Modifier ====== */\n\n    constructor() {}\n\n    /* ======= Mutation Functions ====== */\n\n    /**\n     *\n     * @dev Sets a bet for a user in the decentralized betting platform.\n     * @param _betSize The size of the bet.\n     * @param _minPrice The minimum price for the bet.\n     * @param _maxPrice The maximum price for the bet.\n     * @param _expTime The expiration time for the bet.\n     * @param _underlying The underlying asset for the bet.\n     */\n    function setBet(uint256 _betSize, uint256 _minPrice, uint256 _maxPrice, uint256 _expTime, string memory _underlying)\n        external\n        whenNotPaused\n    {\n        bytes32 _hash = getUnderlyingByte(_underlying);\n        _isValidUnderlying(_hash);\n        _isPointTrackerSet();\n\n        if (_expTime > IPointTracker(pointTracker).getSeasonEndDate()) {\n            revert DefiBetsManager__ExpTimeNotValid();\n        }\n\n        //TODO: Check if the account has enough points\n\n        uint256 _price = getCurrPrice(_hash);\n\n        uint256 _winning = calculateWinning(_price, _betSize, _minPrice, _maxPrice, _expTime, _hash);\n\n        address _defiBets = defiBetsContracts[_hash];\n\n        _executeBetForAccount(_defiBets, _betSize, _minPrice, _maxPrice, _expTime, _winning);\n\n        IPointTracker(pointTracker).reducePointsForPlayer(msg.sender, _betSize);\n    }\n\n    /**\n     * @dev Claims the winnings for a user based on a specified token ID and underlying asset hash.\n     * @param _tokenId The token ID representing the bet.\n     * @param _hash The hash of the underlying asset for the bet.\n     */\n    function claimWinnings(uint256 _tokenId, bytes32 _hash) external whenNotPaused {\n        _isPointTrackerSet();\n        address _defiBets = defiBetsContracts[_hash];\n\n        (uint256 _tokenAmount, bool _profit,uint256 expTime) = IDefiBets(_defiBets).claimForAccount(msg.sender, _tokenId);\n\n        //Update the points of the user\n        if (_profit) {\n            IPointTracker(pointTracker).addPointsForPlayer(msg.sender, _tokenAmount,expTime);\n        }\n    }\n\n    /**\n     * @dev Executes the expiration of a bet based on the specified expiration time and underlying asset.\n     * @param _expTime The expiration time of the bet.\n     * @param _underlying The underlying asset for the bet.\n     * @param _roundId The round id for a valid price of the underlying\n     */\n    function executeExpiration(uint256 _expTime, string memory _underlying, uint80 _roundId) external whenNotPaused {\n        bytes32 _hash = getUnderlyingByte(_underlying);\n        _isValidUnderlying(_hash);\n\n        uint256 _price = getPrice(_hash, _expTime, _roundId);\n\n        address _defiBets = defiBetsContracts[_hash];\n\n        IDefiBets(_defiBets).performExpiration(_expTime, _price);\n    }\n\n    function createNewExpTime(bytes32 _tokenHash) external whenNotPaused {\n        _isValidUnderlying(_tokenHash);\n\n        address _defiBets = defiBetsContracts[_tokenHash];\n\n        IDefiBets(_defiBets).initializeNewExpTime();\n    }\n\n    /* ====== Setup Functions ====== */\n\n    function setPointTracker(address _pointTracker) external onlyOwner {\n        pointTracker = _pointTracker;\n    }\n\n    function addUnderlyingToken(string memory _underlying, address _feed, address _defiBets) external onlyOwner {\n        bytes32 _hash = getUnderlyingByte(_underlying);\n\n        validUnderlying[_hash] = true;\n\n        updatePriceFeed(_hash, _feed);\n\n        defiBetsContracts[_hash] = _defiBets;\n\n        emit UnderlyingAdded(_underlying, _hash, _defiBets);\n    }\n\n    function updatePriceFeed(bytes32 _hash, address _feed) public onlyOwner {\n        _isValidUnderlying(_hash);\n\n        underlyingPriceFeeds[_hash] = _feed;\n\n        emit PriceFeedUpdated(_hash, _feed);\n    }\n\n    function updateIVFeed(bytes32 _hash, address _feed, uint256 _period) public onlyOwner {\n        _isValidUnderlying(_hash);\n\n        underlyingIVFeeds[_hash] = IVFeed(_feed, _period);\n\n        emit IVFeedUpdated(_hash, _feed, _period);\n    }\n\n    function initializeBets(\n        bytes32 _hash,\n        uint256 _startExpTime,\n        uint256 _minBetDuration,\n        uint256 _maxBetDuration,\n        uint256 _slot\n    ) external onlyOwner {\n        address _defiBets = defiBetsContracts[_hash];\n\n        IDefiBets(_defiBets).initializeData(_startExpTime, _minBetDuration, _maxBetDuration, _slot);\n    }\n\n    function setDefiBetsParameter(\n        uint256 _minBetDuration,\n        uint256 _maxBetDuration,\n        uint256 _slot,\n        uint256 _timeDelta,\n        uint256 _dependentTimeStamp,\n        bytes32 _hash\n    ) external onlyOwner {\n        _isValidUnderlying(_hash);\n\n        address _defiBetsAddress = defiBetsContracts[_hash];\n\n        IDefiBets(_defiBetsAddress).setBetParamater(\n            _maxBetDuration, _minBetDuration, _slot, _timeDelta, _dependentTimeStamp\n        );\n    }\n\n    /* ====== Internal Functions ====== */\n\n    function _isValidUnderlying(bytes32 _hash) internal view {\n        if (validUnderlying[_hash] == false) {\n            revert DefiBetsManager__NoValidUnderlying();\n        }\n    }\n\n    function _executeBetForAccount(\n        address _defiBets,\n        uint256 _betSize,\n        uint256 _minPrice,\n        uint256 _maxPrice,\n        uint256 _expTime,\n        uint256 _winning\n    ) internal {\n        IDefiBets(_defiBets).setBetForAccount(msg.sender, _betSize, _minPrice, _maxPrice, _expTime, _winning);\n    }\n\n    function _isRoundIdValid(\n        uint256 _expTime,\n        uint80 _roundId,\n        uint80 _latestRoundId,\n        uint256 _latestRoundIdTimestamp,\n        address _priceFeed\n    ) internal view {\n        bool _valid = true;\n\n        if (_roundId > _latestRoundId) {\n            _valid = false;\n        }\n\n        if (_roundId < _latestRoundId) {\n            (,,, uint256 _timestamp,) = AggregatorV3Interface(_priceFeed).getRoundData(_roundId + 1);\n            _valid = _timestamp >= _expTime;\n        }\n\n        if (_roundId == _latestRoundId) {\n            _valid = _latestRoundIdTimestamp <= _expTime;\n        }\n\n        if (_valid == false) {\n            revert DefiBetsManager__NotValidRoundId();\n        }\n    }\n\n    function _calculateWinnings(uint256 _value, uint256 _probability) internal pure returns (uint256) {\n        return (_value).mul(MULTIPLIER).div(_probability);\n    }\n\n    function _isPointTrackerSet() internal view {\n        if (pointTracker == address(0)) {\n            revert DefiBetsManager__NoPointTrackerSet();\n        }\n    }\n\n    /* ====== Pure/View Functions ====== */\n\n    function getCurrPrice(bytes32 _hash) public view returns (uint256) {\n        uint256 price;\n\n        address _priceFeed = underlyingPriceFeeds[_hash];\n        if(_priceFeed == address(0)){\n            return 0;\n        }\n\n        (, int256 answer,,,) = AggregatorV3Interface(_priceFeed).latestRoundData();\n\n        price = uint256(answer);\n\n        return price;\n    }\n\n    function getPrice(bytes32 _hash, uint256 _expTime, uint80 _roundId) public view returns (uint256) {\n        uint256 price;\n\n        if (underlyingPriceFeeds[_hash] != address(0) && block.timestamp >= _expTime) {\n            address _priceFeed = underlyingPriceFeeds[_hash];\n\n            (uint80 _latestRoundId, int256 _latestAnswer,, uint256 _latestTimestamp,) =\n                AggregatorV3Interface(_priceFeed).latestRoundData();\n\n            _isRoundIdValid(_expTime, _roundId, _latestRoundId, _latestTimestamp, _priceFeed);\n\n            if (_latestRoundId == _roundId) {\n                price = uint256(_latestAnswer);\n            } else {\n                (, int256 _answer,,,) = AggregatorV3Interface(_priceFeed).getRoundData(_roundId);\n                price = uint256(_answer);\n            }\n        }\n\n        return price;\n    }\n\n    function getUnderlyingByte(string memory _token) public pure returns (bytes32) {\n        return keccak256(bytes(_token));\n    }\n\n    function calculateWinning(\n        uint256 _price,\n        uint256 _betSize,\n        uint256 _minPrice,\n        uint256 _maxPrice,\n        uint256 _expTime,\n        bytes32 _hash\n    ) public view returns (uint256) {\n        uint256 vola = getImplVol(_hash);\n        if (vola == 0) {\n            return 0;\n        }\n\n        //Probabiliy per 10000\n        uint256 probability = MathLibraryDefibets.calculateProbabilityRange(\n            _minPrice,\n            _maxPrice,\n            _price, /* current price BTC */\n            vola,\n            underlyingIVFeeds[_hash].period,\n            (_expTime.sub(block.timestamp))\n        ); /* days untill expiry * 10000 */\n\n        return _calculateWinnings(_betSize, probability);\n    }\n\n    function _isNotNull(uint256 param) internal pure {\n        if (0 == param) {\n            revert DefiBetsManager__ParamNull();\n        }\n    }\n\n    function getImplVol(bytes32 _hash) public view returns (uint256) {\n        address volaFeed = underlyingIVFeeds[_hash].feedAddress;\n        if (volaFeed == address(0)) {\n            return 0;\n        }\n\n        (, int256 answer,,,) = AggregatorV3Interface(underlyingIVFeeds[_hash].feedAddress).latestRoundData();\n\n        return uint256(answer);\n    }\n}\n"
    },
    "src/core/PointTracker.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract PointTracker is Ownable {\n    /* === Errors === */\n    error PointTracker__SeasonOutOfBounds();\n    error PointTracker__AccessForbidden();\n    error PointTracker__AccountAlreadyActivated();\n    error PointTracker__AccountNotEligible();\n    error PointTracker__SeasonIsNotActive();\n    error PointTracker__PlayerNotActive();\n    error PointTracker__SeasonIsActive();\n    error PointTracker__NotEndOfSeasonReached();\n    error PointTracker__NotEnoughPoints();\n    error PointTracker__BetTimeBeforeSeasonStart();\n\n    uint256 public constant MINIMUM_DFI_AMOUNT = 0.1 ether;\n    uint256 public immutable i_startingPoints;\n\n    /* === State Varibales === */\n    address private manager;\n    uint256 private season;\n\n    uint256 private endOfSeason;\n\n    bool private seasonActive;\n\n    mapping(uint256 => mapping(address => uint256)) private pointsInSeason;\n    mapping(uint256 => mapping(address => bool)) private isActivated;\n    mapping(uint256 => uint256) private seasonStartTimes;\n    \n\n    /* === Events === */\n    event AccountActivation(address indexed player, uint256 season);\n    event SeasonFinished(uint256 season);\n    event SeasonStarted(uint256 season);\n    event PointsAdded(address indexed player, uint256 pointsAdded, uint256 newScore);\n    event PointsRemoved(address indexed player, uint256 pointsRemoved, uint256 newScore);\n\n    /* === Modifier === */\n    modifier seasonIsActive() {\n        if (seasonActive == false) {\n            revert PointTracker__SeasonIsNotActive();\n        }\n\n        _;\n    }\n\n    modifier seasonNotActive() {\n        if (seasonActive == true) {\n            revert PointTracker__SeasonIsActive();\n        }\n        _;\n    }\n\n    constructor(address _manager, uint256 startingPoints) {\n        manager = _manager;\n        i_startingPoints = startingPoints;\n    }\n\n    /* === Mutation Functions === */\n\n    function addPointsForPlayer(address _player, uint256 _points,uint256 _expTime) external seasonIsActive {\n        _isManager();\n        _isPlayerActive(_player);\n\n        if(_expTime < getSeasonStartTime(season)){\n            revert PointTracker__BetTimeBeforeSeasonStart();\n        }\n\n        pointsInSeason[season][_player] += _points;\n\n        emit PointsAdded(_player, _points, pointsInSeason[season][_player]);\n    }\n\n    function reducePointsForPlayer(address _player, uint256 _points) external seasonIsActive {\n        _isManager();\n        _isPlayerActive(_player);\n        _hasEnoughPoints(_player, _points);\n\n        pointsInSeason[season][_player] -= _points;\n\n        emit PointsRemoved(_player, _points, pointsInSeason[season][_player]);\n    }\n\n    function activateAccount() external seasonIsActive {\n        if (isActivated[season][msg.sender] == true) {\n            revert PointTracker__AccountAlreadyActivated();\n        }\n\n        if (msg.sender.balance < MINIMUM_DFI_AMOUNT) {\n            revert PointTracker__AccountNotEligible();\n        }\n\n        pointsInSeason[season][msg.sender] = i_startingPoints;\n        isActivated[season][msg.sender] = true;\n\n        emit AccountActivation(msg.sender, season);\n    }\n\n    function finishSeason() external onlyOwner seasonIsActive {\n        if (block.timestamp < endOfSeason) {\n            revert PointTracker__NotEndOfSeasonReached();\n        }\n        seasonActive = false;\n\n        emit SeasonFinished(season);\n    }\n\n    function startSeason(uint256 _endOfSeason) external onlyOwner seasonNotActive {\n        seasonActive = true;\n\n        season++;\n\n        endOfSeason = _endOfSeason;\n\n        seasonStartTimes[season] = block.timestamp;\n\n        emit SeasonStarted(season);\n    }\n\n    /* === Internal Functions === */\n\n    function _isManager() internal view {\n        if (msg.sender != manager) {\n            revert PointTracker__AccessForbidden();\n        }\n    }\n\n    function _isPlayerActive(address _player) internal view {\n        if (isActivated[season][_player] == false) {\n            revert PointTracker__PlayerNotActive();\n        }\n    }\n\n    function _hasEnoughPoints(address _player, uint256 _points) internal view {\n        if (pointsInSeason[season][_player] < _points) {\n            revert PointTracker__NotEnoughPoints();\n        }\n    }\n\n    /* === Pure / View Functions === */\n\n    function getManager() public view returns (address) {\n        return manager;\n    }\n\n    function getLatestSeason() public view returns (uint256) {\n        return season;\n    }\n\n    function getPlayerPoints(uint256 _season, address _player) public view returns (uint256) {\n        if (_season > season) {\n            revert PointTracker__SeasonOutOfBounds();\n        }\n\n        return pointsInSeason[_season][_player];\n    }\n\n    function getSeasonEndDate() external view returns (uint256) {\n        return endOfSeason;\n    }\n\n    function isAccountActive(uint256 _season, address _player) public view returns (bool) {\n        return isActivated[_season][_player];\n    }\n\n    function getSeasonStartTime(uint256 _season) public view returns(uint256){\n        return seasonStartTimes[_season];\n    }\n}\n"
    },
    "src/interface/core/IDefiBets.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\ninterface IDefiBets {\n    function setBetForAccount(\n        address _account,\n        uint256 _betSize,\n        uint256 _minPrice,\n        uint256 _maxPrice,\n        uint256 _expTime,\n        uint256 _winning\n    ) external;\n\n    function claimForAccount(address _account, uint256 _betID) external returns (uint256, bool,uint256);\n\n    function setBetParamater(\n        uint256 _minBetDuration,\n        uint256 _maxBetDuration,\n        uint256 _slot,\n        uint256 _timeDelta,\n        uint256 _dependentTimeStamp\n    ) external;\n\n    function performExpiration(uint256 _expTime, uint256 _expPrice) external;\n\n    function initializeNewExpTime() external;\n\n    function lastActiveExpTime() external returns (uint256);\n\n    function initializeData(uint256 _startExpTime, uint256 _minBetDuration, uint256 _maxBetDuration, uint256 _slot)\n        external;\n}\n"
    },
    "src/interface/core/IPointTracker.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\ninterface IPointTracker {\n    function reducePointsForPlayer(address _player, uint256 _points) external;\n\n    function addPointsForPlayer(address _player, uint256 _points,uint256 _expTime) external;\n\n    function getSeasonEndDate() external view returns (uint256);\n}\n"
    },
    "src/lib/MathLibraryDefiBets.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n// Useful for debugging. Remove when deploying to a live network.\n\nerror MathLibraryDefibets__WrongParameter();\nerror MathLibraryDefibets__StdDeviationOutOfBounds();\n\nlibrary MathLibraryDefibets {\n    using SafeMath for uint256;\n\n    // positive Z-Table probability values from standard deviation 0 to 3. Needed to get probability from standard deviation.\n    bytes constant z_table_positive =\n        hex\"144F151615DC16A11763182318E0199A1A501B031BB01C591CFE1D9C1E361EC91F571FDF206120DD215321C3222D229122F02348239B23E82431247424B224EC25212552257F25A925CE25F12610262C2646265D26722685269626A526B226BE26C926D226DA26E126E826ED26F226F626FA26FD27002703\";\n\n    // negative Z-Table probability values from standard deviation -3 to -0.05. Needed to get probability from standard deviation.\n    bytes constant z_table_negative =\n        hex\"000D001000130016001A001E00230028002F0036003E00470052005E006B007A008B009E00B300CA00E40100011F01420167019101BE01EF0224025E029C02DF0328037503C80420047F04E3054D05BD063306AF073107B9084708DA09740A120AB70B600C0D0CC00E300EED0FAD106F113411FA12C11388\";\n\n    uint256 public constant BILLION = 1000000000;\n    uint256 public constant Z_TABLE_MAX = 59; // 60 values per table with each value 2 byte length\n\n    function abs(int256 x) private pure returns (int256) {\n        return x >= 0 ? x : -x;\n    }\n\n    function calculateStandardDeviation(\n        uint256 currPrice,\n        uint256 impliedVolatility30,\n        uint256 timeUntilEpxiry,\n        uint256 impliedVolatitityTime\n    ) internal pure returns (uint256) {\n        uint256 adjImpliedVol =\n            (impliedVolatility30.mul(Math.sqrt(timeUntilEpxiry.mul(10 ** 8).div(impliedVolatitityTime)))).div(10000);\n\n        return (currPrice.mul(adjImpliedVol)).div(10000);\n    }\n\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\n        require(_bytes.length >= _start + 2, \"toUint16_outOfBounds\");\n        uint16 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x2), mul(_start, 2)))\n        }\n\n        return tempUint;\n    }\n\n    /**\n     *\n     * @dev - return the zScore with 4 decimals\n     */\n    function calculateZScore(uint256 _delta, uint256 _stdDeviation) internal pure returns (uint256) {\n        return _delta.mul(10 ** 4).div(_stdDeviation);\n    }\n\n    function lookupZtableFromStdDeviation(uint256 zScore, bool useNegativeZTable) private pure returns (uint16) {\n        uint256 index = zScore.div(500);\n\n        if (Z_TABLE_MAX < index) {\n            index = Z_TABLE_MAX;\n        }\n\n        if (useNegativeZTable) {\n            // use negative Z-Table\n            index = Z_TABLE_MAX - index; /* Invert for negative Z-Table values */\n            return toUint16(z_table_negative, index);\n        } else {\n            // use positive Z-Table\n            return toUint16(z_table_positive, index);\n        }\n    }\n\n    function calculateProbabilityForBetPrice(uint256 betPrice, uint256 currPrice, uint256 stdDeviation)\n        internal\n        pure\n        returns (uint16)\n    {\n        uint256 delta = 0;\n        bool isNegative = false;\n\n        if (currPrice > betPrice) {\n            isNegative = true;\n            delta = currPrice.sub(betPrice);\n        } else {\n            delta = betPrice.sub(currPrice);\n        }\n\n        uint256 zScore = calculateZScore(delta, stdDeviation);\n\n        return lookupZtableFromStdDeviation(zScore, isNegative);\n    }\n\n    /**\n     *\n     * @param lowerPrice - lower price of the price range with decimals\n     * @param upperPrice - upper price of the price range with decimals\n     * @param currPrice  - the current price of the underlying with decimals\n     * @param impliedVolatility - the implied volatility for x days in promille => 30% = 3000\n     * @param impliedVolatilityTime - the time of the volatility in seconds\n     * @param timeUntilEpxiry - the remaining time until expiration in seconds\n     */\n    function calculateProbabilityRange(\n        uint256 lowerPrice,\n        uint256 upperPrice,\n        uint256 currPrice,\n        uint256 impliedVolatility,\n        uint256 impliedVolatilityTime,\n        uint256 timeUntilEpxiry\n    ) public pure returns (uint256) {\n        // Sanity checks\n        if ((lowerPrice < 0) || (upperPrice < 0) || (currPrice < 0)) {\n            revert MathLibraryDefibets__WrongParameter();\n        }\n\n        uint256 stdDeviation =\n            calculateStandardDeviation(currPrice, impliedVolatility, timeUntilEpxiry, impliedVolatilityTime);\n\n        //-----------------------------------------------------\n        // 1. calculate probability for lower range boundary\n        //-----------------------------------------------------\n\n        uint16 propability_lower_10000 = calculateProbabilityForBetPrice(lowerPrice, currPrice, stdDeviation);\n\n        //-----------------------------------------------------\n        // 2. calculate probability for higher range boundary\n        //-----------------------------------------------------\n\n        uint16 propability_higher_10000 = calculateProbabilityForBetPrice(upperPrice, currPrice, stdDeviation);\n\n        //---------------------------------------------------------------\n        // 3. calculate end probability for the range. (higher - lower)\n        //---------------------------------------------------------------\n        uint256 probability = propability_higher_10000 - propability_lower_10000;\n\n        return (probability);\n    }\n}\n"
    },
    "src/oracles/BTCPriceOracle.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"./DefiBetOracle.sol\";\n\ncontract BTCPriceOracle is DefiBetOracle {\n    string public underlying;\n\n    constructor(uint8 _decimals, string memory _description, uint256 _version, string memory _underlying)\n        DefiBetOracle(_decimals, _description, _version)\n    {\n        underlying = _underlying;\n    }\n}\n"
    },
    "src/oracles/DefiBetOracle.sol": {
      "content": "// SPDX-License-Identifier: SEE LICENSE IN LICENSE\npragma solidity ^0.8.9;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract DefiBetOracle is AggregatorV3Interface, Ownable {\n    uint8 public decimals;\n    uint80 private latestRound;\n    uint256 public version;\n    string public description;\n\n    mapping(uint80 => int256) public getAnswer;\n    mapping(uint80 => uint256) public getTimestamp;\n    mapping(uint80 => uint256) public getStartedAt;\n\n    constructor(uint8 _decimals, string memory _description, uint256 _version) {\n        decimals = _decimals;\n        description = _description;\n        version = _version;\n    }\n\n    function updateAnswer(int256 _answer) public onlyOwner {\n        latestRound++;\n        getAnswer[latestRound] = _answer;\n        getTimestamp[latestRound] = block.timestamp;\n        getStartedAt[latestRound] = block.timestamp;\n    }\n\n    function getRoundData(uint80 _roundId)\n        external\n        view\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\n    {\n        return (_roundId, getAnswer[_roundId], getStartedAt[_roundId], getTimestamp[_roundId], _roundId);\n    }\n\n    function latestRoundData()\n        external\n        view\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\n    {\n        return (latestRound, getAnswer[latestRound], getStartedAt[latestRound], getTimestamp[latestRound], latestRound);\n    }\n}\n"
    },
    "src/oracles/ImpliedVolatilityOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"./DefiBetOracle.sol\";\n\ncontract ImpliedVolatilityOracle is DefiBetOracle {\n    uint256 public period;\n    string public underlying;\n\n    constructor(\n        uint8 _decimals,\n        string memory _description,\n        uint256 _version,\n        string memory _underlying,\n        uint256 _period\n    ) DefiBetOracle(_decimals, _description, _version) {\n        underlying = _underlying;\n        period = _period;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {
      "": {
        "__CACHE_BREAKER__": "0x0000000000000031373032303333313338333736"
      }
    }
  }
}